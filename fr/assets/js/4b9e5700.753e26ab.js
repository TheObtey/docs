"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[918],{96436:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=s(85893),t=s(11151);const o={title:"Extending Classes",description:"How to extend nanos world Classes",sidebar_position:8,tags:["scripting"]},d=void 0,a={id:"core-concepts/scripting/extending-classes",title:"Extending Classes",description:"How to extend nanos world Classes",source:"@site/versioned_docs/version-latest/core-concepts/scripting/extending-classes.md",sourceDirName:"core-concepts/scripting",slug:"/core-concepts/scripting/extending-classes",permalink:"/fr/docs/core-concepts/scripting/extending-classes",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/nanos-world-docs/fr",tags:[{label:"scripting",permalink:"/fr/docs/tags/scripting"}],version:"latest",lastUpdatedBy:"Gabriel T. Nardy",lastUpdatedAt:1700127464,formattedLastUpdatedAt:"16 nov. 2023",sidebarPosition:8,frontMatter:{title:"Extending Classes",description:"How to extend nanos world Classes",sidebar_position:8,tags:["scripting"]},sidebar:"main",previous:{title:"Traces & Raycasting",permalink:"/fr/docs/core-concepts/scripting/traces-and-raycasting"},next:{title:"Inheriting Classes",permalink:"/fr/docs/core-concepts/scripting/inheriting-classes"}},r={},l=[{value:"Adding new Methods",id:"adding-new-methods",level:3},{value:"Overriding Existing Methods",id:"overriding-existing-methods",level:3},{value:"Overriding <code>__newindex</code>",id:"overriding-__newindex",level:3},{value:"Overriding <code>__index</code>",id:"overriding-__index",level:3}];function c(e){const n={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"How to extend nanos world Classes, nanos world provides a built-in way of extending and customizing the Classes"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["This feature is still ",(0,i.jsx)(n.strong,{children:"experimental"}),", you can try it out and provide feedback before it's full release!"]})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Extending Classes can be very useful and speed up the development. Although the code may become very complex and hard for newcomers to understand. As it will start using non-documented methods and accessors."})}),"\n",(0,i.jsx)(n.h3,{id:"adding-new-methods",children:"Adding new Methods"}),"\n",(0,i.jsxs)(n.p,{children:["Adding new methods for classes is the most straightforward way, let's say we want to add a new method for ",(0,i.jsx)(n.strong,{children:"Player"}),", we just do that:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function Player:AddScore(score)\n\tself:SetValue("score", self:GetValue("score", 0) + score)\nend\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Within your methods, you can access the called entity instance with ",(0,i.jsx)(n.code,{children:"self"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"And then you are able to call it as usual:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local my_player = GetPlayerSomehow()\nmy_player:AddScore(10)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Extending Classes will have effect only on the Package and the side you are! You can define all new methods in the ",(0,i.jsx)(n.code,{children:"Shared"})," folder to have it applied on both Client and Server!"]})}),"\n",(0,i.jsx)(n.h3,{id:"overriding-existing-methods",children:"Overriding Existing Methods"}),"\n",(0,i.jsx)(n.p,{children:"Besides creating new methods, it's possible to override existing ones, for that, just redefine them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function Character:SetLocation(new_location)\n\t-- ... Do something\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And you can call a special method called ",(0,i.jsx)(n.code,{children:":Super()"})," to call the original method as well:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function Character:SetLocation(new_location)\n\t-- ... Do something\n    self:Super(new_location + Vector(1, 2, 3))\nend\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"overriding-__newindex",children:["Overriding ",(0,i.jsx)(n.code,{children:"__newindex"})]}),"\n",(0,i.jsxs)(n.p,{children:["It is also possible to add a custom ",(0,i.jsx)(n.code,{children:"__newindex"})," metamethod on Classes."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"__newindex"})," metamethod is a function which is triggered when you attempt to ",(0,i.jsx)(n.strong,{children:"set"})," a value in an entity. E.g.: ",(0,i.jsx)(n.code,{children:"my_prop.something = 123"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["For that, we just add a custom method called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"newindex"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function Player:newindex(key, value)\n\tConsole.Log("Setting a %s value: %s = %s", tostring(self), key, tostring(value))\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["An useful way of using ",(0,i.jsx)(n.code,{children:"__newindex"})," is overriding it to ",(0,i.jsx)(n.code,{children:"SetValue"})," automatically:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function Player:newindex(key, value)\n    self:SetValue(key, value)\nend\n\nlocal my_player = GetPlayerSomehow()\nmy_player.amazing_value = 123\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"overriding-__index",children:["Overriding ",(0,i.jsx)(n.code,{children:"__index"})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"__index"})," metamethod is a function which is triggered when you attempt to ",(0,i.jsx)(n.strong,{children:"get"})," a value from an entity. E.g.: ",(0,i.jsx)(n.code,{children:"local value = my_prop.something"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["For that, we just add a custom method called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"index"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function Player:index(key)\n\tConsole.Log("Getting %s value: %s", tostring(self), key)\n    -- ... do something\n    return some_value\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["An useful way of using ",(0,i.jsx)(n.code,{children:"__index"})," is overriding it to ",(0,i.jsx)(n.code,{children:"GetValue"})," automatically:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function Player:index(key)\n    return self:GetValue(key)\nend\n\nlocal my_player = GetPlayerSomehow()\nlocal amazing_value = my_player.amazing_value\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>d});var i=s(67294);const t={},o=i.createContext(t);function d(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);