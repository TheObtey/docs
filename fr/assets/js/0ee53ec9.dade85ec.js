"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[7153],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91771:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var i=n(83117),a=n(80102),r=(n(67294),n(3905)),o=n(2627),s=["components"],l={title:"\u26d3\ufe0f Cable",description:"Un c\xe2ble repr\xe9sente une contrainte physique qui relie deux acteurs avec une repr\xe9sentation visuelle de type corde entre eux",sidebar_position:0,tags:["class"]},c=void 0,p={unversionedId:"scripting-reference/classes/cable",id:"version-latest/scripting-reference/classes/cable",title:"\u26d3\ufe0f Cable",description:"Un c\xe2ble repr\xe9sente une contrainte physique qui relie deux acteurs avec une repr\xe9sentation visuelle de type corde entre eux",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-latest/scripting-reference/classes/cable.mdx",sourceDirName:"scripting-reference/classes",slug:"/scripting-reference/classes/cable",permalink:"/fr/docs/scripting-reference/classes/cable",draft:!1,editUrl:"https://github.com/nanos-world/docs/edit/master/versioned_docs/version-latest/scripting-reference/classes/cable.mdx",tags:[{label:"class",permalink:"/fr/docs/tags/class"}],version:"latest",sidebarPosition:0,frontMatter:{title:"\u26d3\ufe0f Cable",description:"Un c\xe2ble repr\xe9sente une contrainte physique qui relie deux acteurs avec une repr\xe9sentation visuelle de type corde entre eux",sidebar_position:0,tags:["class"]},sidebar:"version-latest/main",previous:{title:"\ud83d\udd23 Blueprint",permalink:"/fr/docs/scripting-reference/classes/blueprint"},next:{title:"\ud83d\uddbc\ufe0f Canvas",permalink:"/fr/docs/scripting-reference/classes/canvas"}},u={},d=[{value:"\ud83c\udf92 Examples",id:"-examples",level:2},{value:"\ud83c\udfd7\ufe0f Constructor",id:"\ufe0f-constructor",level:2},{value:"\ud83e\udda0 Functions",id:"-functions",level:2},{value:"\ud83d\ude80 Events",id:"-events",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},h=m("HeaderDeclaration"),f=m("ConstructorDeclaration"),b=m("FunctionsDeclaration"),y=m("EventsDeclaration"),g={toc:d};function v(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(h,{class_data:o,image:"/img/docs/cable.jpg",mdxType:"HeaderDeclaration"}),(0,r.kt)("p",null,"nanos world ",(0,r.kt)("strong",{parentName:"p"},"Cables")," sont compos\xe9s principalement de deux \xe9l\xe9ments du moteur Unreal Engine: un ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/en-US/API/Plugins/CableComponent/UCableComponent/index.html"},"Cable")," et un ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unrealengine.com/en-US/InteractiveExperiences/Physics/Constraints/ConstraintsBlueprints/index.html"},"PhysicsConstraint"),". Le premier est utilis\xe9 \xe0 des fins visuelles uniquement et le second donne les effets physiques effectifs qui sont appliqu\xe9s \xe0 chaque extr\xe9mit\xe9 du c\xe2ble."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Le ",(0,r.kt)("strong",{parentName:"p"},"visuel")," des cables peut \xeatre modifi\xe9 avec les m\xe9thodes ",(0,r.kt)("inlineCode",{parentName:"p"},":SetForces()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},":SetCableSettings()")," et ",(0,r.kt)("inlineCode",{parentName:"p"},":SetRenderingSettings()"),". Ces m\xe9thodes n'ont pas d'effet sur la physique appliqu\xe9e et n'ont que des effets sur la repr\xe9sentation visuelle."),(0,r.kt)("p",{parentName:"admonition"},"La ",(0,r.kt)("strong",{parentName:"p"},"physique")," des cables peut \xeatre modifi\xe9e avec ",(0,r.kt)("inlineCode",{parentName:"p"},":SetAngularLimits()")," et ",(0,r.kt)("inlineCode",{parentName:"p"},":SetLinearLimits()"),".")),(0,r.kt)("p",null,"Apr\xe8s avoir attach\xe9 les deux c\xf4t\xe9s de votre c\xe2ble, la physique peut \xeatre ajust\xe9e pour affecter la fa\xe7on dont la contrainte affectera les objets."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Les c\xe2bles sont automatiquement ",(0,r.kt)("strong",{parentName:"p"},"d\xe9truits")," lorsqu'un des c\xf4t\xe9s est d\xe9tach\xe9")),(0,r.kt)("h2",{id:"-examples"},"\ud83c\udf92 Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server/Index.lua"',title:'"Server/Index.lua"'},'local my_cable: = Cable()\nlocal cube_01 = Prop(Vector(100, 100, 100), Rotator(), "nanos-world::SM_Cube")\nlocal cube_02 = Prop(Vector(200, 0, 100), Rotator(), "nanos-world::SM_Cube")\n\nmy_cable::AttachStartTo(cube_01)\nmy_cable::AttachEndTo(cube_02)\n')),(0,r.kt)("h2",{id:"\ufe0f-constructor"},"\ud83c\udfd7\ufe0f Constructor"),(0,r.kt)(f,{class_data:o,mdxType:"ConstructorDeclaration"}),(0,r.kt)("h2",{id:"-functions"},"\ud83e\udda0 Functions"),(0,r.kt)(b,{class_data:o,mdxType:"FunctionsDeclaration"}),(0,r.kt)("h2",{id:"-events"},"\ud83d\ude80 Events"),(0,r.kt)(y,{class_data:o,mdxType:"EventsDeclaration"}))}v.isMDXComponent=!0},2627:function(e){e.exports=JSON.parse('{"name":"Cable","description":"A Cable represents a Physics Constraint which joins two Actors with a rope-like visual representation between them.","authority":"server","inheritance":["Actor","Paintable"],"constructor":[{"type":"Vector","name":"location","default":"Vector(0, 0, 0)"},{"type":"boolean","name":"enable_visuals","default":"true","description":"Toggles the cable visuals"}],"functions":[{"authority":"server","name":"AttachStartTo","description":"Attached the beginning of this cable to another Actor at a specific bone or relative location","parameters":[{"type":"Actor","name":"other"},{"type":"Vector","name":"relative_location","default":"Vector(0, 0, 0)"},{"type":"string","name":"bone_name","default":""}]},{"authority":"server","name":"AttachEndTo","description":"Attached the end of this cable to another Actor at a specific bone or relative location","parameters":[{"type":"Actor","name":"other"},{"type":"Vector","name":"relative_location","default":"Vector(0, 0, 0)"},{"type":"string","name":"bone_name","default":""}]},{"authority":"server","name":"DetachEnd","description":"Detaches the End of this Cable"},{"authority":"server","name":"DetachStart","description":"Detaches the Start of this Cable"},{"authority":"both","name":"SetCableSettings","description":"Set the overall settings for this cable (visuals only)","parameters":[{"type":"number","name":"length","description":"Rest length of the cable. Default is 100"},{"type":"number","name":"num_segments","description":"How many segments the cable has. Default is 10"},{"type":"number","name":"solver_iterations","description":"The number of solver iterations controls how \'stiff\' the cable is. Default is 0"}]},{"authority":"both","name":"SetForces","description":"Set the forces the cable has applied (visuals only)","parameters":[{"type":"Vector","name":"force","description":"Force vector (world space) applied to all particles in cable. Default is Vector(0, 0, 0)"},{"type":"number","name":"gravity_scale","default":"1","description":"Scaling applied to world gravity affecting this cable. Default is 1"}]},{"authority":"server","name":"SetAngularLimits","description":"Sets the Physics Angular Limits of this cable","parameters":[{"type":"ConstraintMotion","name":"swing_1_motion","description":"Indicates whether the Swing1 limit is used"},{"type":"ConstraintMotion","name":"swing_2_motion","description":"Indicates whether the Swing2 limit is used"},{"type":"ConstraintMotion","name":"twist_motion","description":"Indicates whether the Twist limit is used"},{"type":"number","name":"swing_1_limit","default":"0","description":"Angle of movement along the XY plane. This defines the first symmetric angle of the cone"},{"type":"number","name":"swing_2_limit","default":"0","description":"Angle of movement along the XZ plane. This defines the second symmetric angle of the cone"},{"type":"number","name":"twist_limit","default":"0","description":"Symmetric angle of roll along the X-axis"}]},{"authority":"server","name":"SetLinearLimits","description":"Sets the Physics Linear Limits of this cable","description_long":"Sets the Physics Linear Limits of this cable. If use_soft_constraint is enabled, then stiffness and damping will be used, otherwise restitution will be used.","parameters":[{"type":"ConstraintMotion","name":"x_motion","description":"Indicates the linear constraint applied along the X-axis. Free implies no constraint at all. Locked implies no movement along X is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided"},{"type":"ConstraintMotion","name":"y_motion","description":"Indicates the linear constraint applied along the Y-axis. Free implies no constraint at all. Locked implies no movement along Y is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided"},{"type":"ConstraintMotion","name":"z_motion","description":"Indicates the linear constraint applied along theZX-axis. Free implies no constraint at all. Locked implies no movement along Z is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided"},{"type":"number","name":"limit","default":"0","description":"The distance allowed between between the two joint reference frames. Distance applies on all axes enabled (one axis means line, two axes implies circle, three axes implies sphere)"},{"type":"number","name":"restitution","default":"0","description":"Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead"},{"type":"boolean","name":"use_soft_constraint","default":"false","description":"Whether we want to use a soft constraint (spring)"},{"type":"number","name":"stiffness","default":"0","description":"Stiffness of the soft constraint. Only used when Soft Constraint is on"},{"type":"number","name":"damping","default":"0","description":"Damping of the soft constraint. Only used when Soft Constraint is on"}]},{"authority":"both","name":"SetRenderingSettings","description":"Set the rendering settings of this cable (visuals only)","parameters":[{"type":"number","name":"width","description":"How wide the cable geometry is. Default is 6"},{"type":"number","name":"num_sides","description":"Number of sides of the cable geometry. Default is 4"},{"type":"number","name":"tile_material","description":"How many times to repeat the material along the length of the cable. Default is 1"}]},{"authority":"both","name":"GetAttachedStartTo","description":"Gets the Actor attached to Start","return":[{"type":"Actor","description":"the Actor or nil"}]},{"authority":"both","name":"GetAttachedEndTo","description":"Gets the Actor attached to End","return":[{"type":"Actor","description":"the Actor or nil"}]}]}')}}]);