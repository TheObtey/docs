"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[9139],{49421:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(85893),s=n(11151);const a={title:"\ud83d\udcfd\ufe0f SceneCapture",description:"Scene Capture is an Actor which captures a fully dynamic image of the scene into a Texture. It captures the scene from its view frustum, stores that view as an image, which is then used within a Material.",sidebar_position:0,tags:["class"]},c=void 0,i={id:"scripting-reference/classes/scene-capture",title:"\ud83d\udcfd\ufe0f SceneCapture",description:"Scene Capture is an Actor which captures a fully dynamic image of the scene into a Texture. It captures the scene from its view frustum, stores that view as an image, which is then used within a Material.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/scripting-reference/classes/scene-capture.mdx",sourceDirName:"scripting-reference/classes",slug:"/scripting-reference/classes/scene-capture",permalink:"/fr/docs/next/scripting-reference/classes/scene-capture",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/nanos-world-docs/fr",tags:[{label:"class",permalink:"/fr/docs/next/tags/class"}],version:"current",sidebarPosition:0,frontMatter:{title:"\ud83d\udcfd\ufe0f SceneCapture",description:"Scene Capture is an Actor which captures a fully dynamic image of the scene into a Texture. It captures the scene from its view frustum, stores that view as an image, which is then used within a Material.",sidebar_position:0,tags:["class"]},sidebar:"main",previous:{title:"\ud83d\udce6 Prop",permalink:"/fr/docs/next/scripting-reference/classes/prop"},next:{title:"\ud83d\udd0a Sound",permalink:"/fr/docs/next/scripting-reference/classes/sound"}},o={},l=[{value:"\ud83c\udf92\xa0Examples",id:"examples",level:2},{value:"\ud83d\udee0\xa0Constructors",id:"constructors",level:2},{value:"\ud83d\uddff\xa0Static Functions",id:"static-functions",level:2},{value:"\ud83e\udda0\xa0Functions",id:"functions",level:2},{value:"\ud83d\ude80\xa0Events",id:"events",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components},{ConstructorDeclaration:n,EventsDeclaration:a,FunctionsDeclaration:c,HeaderDeclaration:i,StaticFunctionsDeclaration:o}=t;return n||d("ConstructorDeclaration",!0),a||d("EventsDeclaration",!0),c||d("FunctionsDeclaration",!0),i||d("HeaderDeclaration",!0),o||d("StaticFunctionsDeclaration",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i,{type:"Class",name:"SceneCapture",image:"/img/docs/scenecapture.webp"}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"\ud83c\udf92\xa0Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",metastring:'title="Client/Index.lua"',children:'local scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Paints the Prop with the SceneCapture output\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), "nanos-world::SM_Cube")\nmy_prop:SetMaterialFromSceneCapture(scene_capture)\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",metastring:'title="Client/Index.lua"',children:'local scene_capture = SceneCapture(\n  Vector(0, 0, 200),\n  Rotator(-15, 0, 0),\n  256,\n  256,\n  0,\n  5000,\n  100\n)\n\n-- Make a SceneCapture to only render a specific actor\nlocal my_prop = Prop(Vector(200, 200, 100), Rotator(), "nanos-world::SM_Cube")\nscene_capture:AddRenderActor(my_prop)\nscene_capture:SetShowFlag("Atmosphere", false)\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["You can use the output Texture from a SceneCapture with ",(0,r.jsxs)(t.a,{href:"/fr/docs/next/scripting-reference/classes/base-classes/paintable#setmaterialfromscenecapture",children:[":SetMaterialFromSceneCapture","()"]})," method!"]})}),"\n",(0,r.jsx)(t.h2,{id:"constructors",children:"\ud83d\udee0\xa0Constructors"}),"\n",(0,r.jsx)(n,{type:"Class",name:"SceneCapture"}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)(t.p,{children:["Scene Captures capture a scene in real time, this means every tick it will re-render the scene from scratch. Please consider reducing the ",(0,r.jsx)(t.code,{children:"width"}),"/",(0,r.jsx)(t.code,{children:"height"})," and even the ",(0,r.jsx)(t.code,{children:"render_rate"})," to improve it's performance."]}),(0,r.jsxs)(t.p,{children:["We've worked hard to make SceneCapture as performatic as possible! Some techniques were applied for optimization and reducing the ",(0,r.jsx)(t.code,{children:"render_rate"})," automatically when you are far and when the generated texture is out of the screen."]})]}),"\n",(0,r.jsx)(t.h2,{id:"static-functions",children:"\ud83d\uddff\xa0Static Functions"}),"\n",(0,r.jsx)(o,{type:"Class",name:"SceneCapture"}),"\n",(0,r.jsx)(t.h2,{id:"functions",children:"\ud83e\udda0\xa0Functions"}),"\n",(0,r.jsx)(c,{type:"Class",name:"SceneCapture"}),"\n",(0,r.jsx)(t.h2,{id:"events",children:"\ud83d\ude80\xa0Events"}),"\n",(0,r.jsx)(a,{type:"Class",name:"SceneCapture"})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}function d(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>c});var r=n(67294);const s={},a=r.createContext(s);function c(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);