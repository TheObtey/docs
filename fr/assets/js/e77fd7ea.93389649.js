"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[4034],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,v=d["".concat(c,".").concat(f)]||d[f]||p[f]||s;return t?r.createElement(v,o(o({ref:n},u),{},{components:t})):r.createElement(v,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},73765:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=t(83117),a=t(80102),s=(t(67294),t(3905)),o=["components"],i={title:"\ud83d\uddbc\ufe0f Canvas",description:"Canvas is an entity which you can draw onto it.",sidebar_position:0,tags:["class"]},c=void 0,l={unversionedId:"scripting-reference/classes/canvas",id:"version-latest/scripting-reference/classes/canvas",title:"\ud83d\uddbc\ufe0f Canvas",description:"Canvas is an entity which you can draw onto it.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-latest/scripting-reference/classes/canvas.mdx",sourceDirName:"scripting-reference/classes",slug:"/scripting-reference/classes/canvas",permalink:"/fr/docs/scripting-reference/classes/canvas",draft:!1,editUrl:"https://github.com/nanos-world/docs/edit/master/versioned_docs/version-latest/scripting-reference/classes/canvas.mdx",tags:[{label:"class",permalink:"/fr/docs/tags/class"}],version:"latest",sidebarPosition:0,frontMatter:{title:"\ud83d\uddbc\ufe0f Canvas",description:"Canvas is an entity which you can draw onto it.",sidebar_position:0,tags:["class"]},sidebar:"version-latest/main",previous:{title:"\u26d3\ufe0f Cable",permalink:"/fr/docs/scripting-reference/classes/cable"},next:{title:"\ud83e\uddd1 Personnage",permalink:"/fr/docs/scripting-reference/classes/character"}},u={},p=[{value:"\ud83c\udf92 Examples",id:"-examples",level:2},{value:"\ud83c\udfd7\ufe0f Constructor",id:"\ufe0f-constructor",level:2},{value:"\ud83e\udda0 Functions",id:"-functions",level:2},{value:"\ud83d\ude80 Events",id:"-events",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",n)}},f=d("HeaderDeclaration"),v=d("ConstructorDeclaration"),m=d("FunctionsDeclaration"),y=d("EventsDeclaration"),h={toc:p};function g(e){var n=e.components,t=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(f,{type:"Class",name:"Canvas",mdxType:"HeaderDeclaration"}),(0,s.kt)("h2",{id:"-examples"},"\ud83c\udf92 Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=Client/Index.lua",title:"Client/Index.lua"},'-- Spawns a Canvas\nlocal my_canvas = Canvas(\n  true,\n  Color.TRANSPARENT,\n  0,\n  true\n)\n\n-- Subscribes for Update, we can only Draw inside this event\nmy_canvas:Subscribe("Update", function(self, width, height)\n  -- Draws a Text in the middle of the screen\n  self:DrawText("Hello World!", Vector2D(width / 2, height / 2))\n\n  -- Draws a red line Horizontally\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\nend)\n\n-- Forces the canvas to repaint, this will make it trigger the Update event\nmy_canvas:Repaint()\n\n-- Applies the Canvas material into a Prop\nany_prop:SetMaterialFromCanvas(my_canvas)\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You can use the output Texture from a Canvas with ",(0,s.kt)("a",{parentName:"p",href:"/fr/docs/scripting-reference/classes/base-classes/paintable#setmaterialfromcanvas"},":SetMaterialFromCanvas()")," method!")),(0,s.kt)("h2",{id:"\ufe0f-constructor"},"\ud83c\udfd7\ufe0f Constructor"),(0,s.kt)(v,{type:"Class",name:"Canvas",mdxType:"ConstructorDeclaration"}),(0,s.kt)("h2",{id:"-functions"},"\ud83e\udda0 Functions"),(0,s.kt)(m,{type:"Class",name:"Canvas",mdxType:"FunctionsDeclaration"}),(0,s.kt)("h2",{id:"-events"},"\ud83d\ude80 Events"),(0,s.kt)(y,{type:"Class",name:"Canvas",mdxType:"EventsDeclaration"}))}g.isMDXComponent=!0}}]);