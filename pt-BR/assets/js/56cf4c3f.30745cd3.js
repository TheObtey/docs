"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[3],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(a),u=r,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||o;return a?n.createElement(m,c(c({ref:t},p),{},{components:a})):n.createElement(m,c({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},44180:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={title:"Basic HUD (Canvas)",description:"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo character's Health and Ammo",tags:["tutorial-example","scripting","ui"]},c=void 0,i={unversionedId:"getting-started/tutorials-and-examples/basic-hud-canvas",id:"version-latest/getting-started/tutorials-and-examples/basic-hud-canvas",title:"Basic HUD (Canvas)",description:"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo character's Health and Ammo",source:"@site/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-canvas.md",sourceDirName:"getting-started/tutorials-and-examples",slug:"/getting-started/tutorials-and-examples/basic-hud-canvas",permalink:"/pt-BR/docs/getting-started/tutorials-and-examples/basic-hud-canvas",draft:!1,editUrl:"https://crowdin.com/project/nanos-world-docs/pt-BR",tags:[{label:"tutorial-example",permalink:"/pt-BR/docs/tags/tutorial-example"},{label:"scripting",permalink:"/pt-BR/docs/tags/scripting"},{label:"ui",permalink:"/pt-BR/docs/tags/ui"}],version:"latest",lastUpdatedBy:"Alleexxi",lastUpdatedAt:1679229347,formattedLastUpdatedAt:"19 de mar. de 2023",frontMatter:{title:"Basic HUD (Canvas)",description:"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo character's Health and Ammo",tags:["tutorial-example","scripting","ui"]},sidebar:"version-latest/main",previous:{title:"\ud83d\udcd1 Complete Tutorials List",permalink:"/pt-BR/docs/getting-started/tutorials-and-examples/"},next:{title:"Basic HUD (HTML)",permalink:"/pt-BR/docs/getting-started/tutorials-and-examples/basic-hud-html"}},s={},l=[],p={toc:l},d="wrapper";function h(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can also create complete and complex UIs using HTML + JavaScript + CSS, check it out: ",(0,r.kt)("a",{parentName:"p",href:"/pt-BR/docs/getting-started/tutorials-and-examples/basic-hud-html"},"Basic HUD (HTML)"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(767).Z,width:"1919",height:"1079"})),(0,r.kt)("p",null,"A Canvas is a painting fabric which can be drawn to. The following code shows how to add a basic UI using Canvas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client/Index.lua"',title:'"Client/Index.lua"'},'-- Spawns the Canvas\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Subscribes for Update event, we can only draw inside this event\nHUDCanvas:Subscribe("Update", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == "Weapon") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText("/ " .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n')),(0,r.kt)("p",null,"The example above re-renders and updates all health/ammo information ever tick, which could be bad for performance. Gladly we can fast improve it by limiting the auto repaint rate by changing it in the constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"-- Instead of 0 in the auto_repaint_rate parameter\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Use 0.033, so it only updates every 0.033ms (i.e. at 30 fps)\n// highlight-next-line\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0.033, true)\n")),(0,r.kt)("p",null,"Another further optimization is to only update when needed, for this case we will need to implement some additional code. In this case, we set ",(0,r.kt)("inlineCode",{parentName:"p"},"auto_repaint_rate")," to -1 to disable it from being auto repainted:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- We set -1 to never auto repaint\nHUDCanvas = Canvas(true, Color.TRANSPARENT, -1, true)\n\n-- Subscribes for Update event, we can only draw inside this event (as usual)\nHUDCanvas:Subscribe("Update", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == "Weapon") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText("/ " .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n\n\n-- Now we subscribe for when we want it to be updated:\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package.Subscribe("Load") to load it when reloading a package\nClient.Subscribe("SpawnLocalPlayer", function(local_player)\n    local_player:Subscribe("Possess", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it\'s controlled character\nPackage.Subscribe("Load", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player  ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn\'t return a character)\n    if (character == nil) then return end\n\n    -- Sets on character an event to update the health\'s UI after it takes damage\n    character:Subscribe("TakeDamage", function(charac, damage, type, bone, from_direction, instigator, causer)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the health\'s UI after it dies\n    character:Subscribe("Death", function(charac)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe("PickUp", function(charac, object)\n        if (object:GetType() == "Weapon") then\n            HUDCanvas:Repaint()\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it\'s weapon\n    character:Subscribe("Drop", function(charac, object)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe("Fire", function(charac, weapon)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe("Reload", function(charac, weapon, ammo_to_reload)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Updates the UI immeditelly\n    HUDCanvas:Repaint()\nend\n\n-- Updates the UI positions when the Viewport (screen) is resized\nClient.Subscribe("ViewportResized", function(NewSize)\n    HUDCanvas:Repaint()\nend)\n')))}h.isMDXComponent=!0},767:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/canvas-3c5a447821b2c235a21ca04c524c4bf3.webp"}}]);