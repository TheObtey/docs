"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[725],{69574:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"december-2022","metadata":{"permalink":"/de/blog/december-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2023-01-04-december.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2023-01-04-december.md","title":"2022 December: One VM to Rule Them All!","description":"One Lua Virtual Machine to Rule Them All!","date":"2023-01-04T00:00:00.000Z","formattedDate":"4. Januar 2023","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":8.03,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"december-2022","title":"2022 December: One VM to Rule Them All!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-december/december-news.webp"},"nextItem":{"title":"2022 November: Entity System, UDS & UE5.1!","permalink":"/de/blog/november-2022"}},"content":"**One Lua Virtual Machine to Rule Them All!**\\n\\n![](/img/blog/2022-december/december-news.webp)\\n\\n\\n## One Lua Virtual Machine\\n\\nAfter much analysis, study and refactoring. I am happily introducing the new way the Packages will work! This was heavily motivated by the lack of possibility of creating extensions or customized items in an easy way.\\n\\n![](/img/blog/2022-december/lua-vm-rule.webp)\\n\\nIn addition to the last new Entity System update, this change will heavily add to the possibilities of modding & scripting capabilities to nanos world!\\n\\n:::info\\n\\nThose changes are meant to have as little as possible impact and breaking changes, all tests I did so far assured everything is still backward compatible!\\n\\n:::\\n\\nSo far, we had one VM (Virtual Machine - or `lua_State`) created per Package. This caused each Package to be completely isolated from each other. Therefore it was necessary to create mechanisms for communication between the Packages, such as **Events** and **Package.Export/Package.Call** methods, which allowed (in a limited way) Packages to communicate with each other.\\n\\nBut as mentioned, this brought many limitations, such as it was not possible for Packages to access variables or call functions directly from other Packages, or even worse (which become more evident from the last update of Entity System): It was not possible to share custom classes between Packages!\\n\\nHowever now all of this will be solved! I reworked the entire internal scripting system, and now instead of having a new virtual machine per Package, we will have a virtualized sandboxed environment (using Lua environment `_ENV` feature), separating the scope of each Package but allowing them to access a global shared environment!\\n\\nThis will allow the Packages to define classes, expose functions and share libraries globally! So that everyone else can use without the need for workaround mechanisms to do so!\\n\\nNow, for example you can just load additional scripts together the `sandbox` game-mode which loads custom Classes of tools or weapons, and those will appear automatically in the Spawn Menu, no need for manually adding them anymore!\\n\\nEach Package will still have it\'s own sub-global environment, so defining global variables or functions will not make them available to other packages immediately.\\n\\n\\n### Call & Export\\n\\n`Package.Call` and `Package.Export` are not necessary in the traditional way anymore. As now we can share the global environment, we can define methods and expose them to be called directly, without the need to `Package.Call` them.\\n\\nThe `Package.Export` will still exist and work similarly. But now it will be possible to \\"expose\\" any value to the global scope! Example:\\n\\n```lua title=package-01/Server/Index.lua\\nlocal my_table = { 123, 456 }\\n\\nfunction DoSomething(var1)\\n    return var1 + 123\\nend\\n\\nPackage.Export(\\"MyTable\\", my_table)\\nPackage.Export(\\"DoSomething\\", DoSomething)\\n```\\n\\n```lua title=package-02/Server/Index.lua\\nConsole.Log(MyTable[1])\\n-- 123\\n\\nConsole.Log(DoSomething(456))\\n-- 579\\n```\\n\\n\\n### Inherited Classes\\n\\nNow all Inherited Classes will be available to all Packages, as they will be created and exposed to the Global scope automatically.\\n\\nThe first parameter of it will now be used as the variable name to set the class in the global scope. Also, it just got a new optional 2nd parameter to define a custom table contained custom values to be set in the class table before it\'s created:\\n\\n```lua\\n-- Note we are assigning the return of Inherit to a variable called\\n-- MyPropClassLocal, but also MyPropClass will be defined globally\\n-- as being our class, both variables points to the same Class table\\nMyPropClassLocal = Prop.Inherit(\\"MyPropClass\\", {\\n    \\"my_custom_value\\" = 123,\\n    \\"my_another_value\\" = \\"hello\\"\\n})\\n\\nlocal val = MyPropClass.my_custom_value\\n-- val == 123\\n```\\n\\nWe\'ve also added a new static event for getting when a new Inherited Class is registered: `ClassRegister`:\\n\\n```lua\\nProp.Subscribe(\\"ClassRegister\\", function(class)\\n    -- Do something with the new class\\nend)\\n```\\n\\n\\n### Library Package Type\\n\\nWith this new way Package work, `library` types are no longer needed. As now we can communicate directly with other packages with exposed global methods, we can just define the methods to be exported with `Package.Export` and use them whenever we want.\\n\\nIn this way we will only have two types of \\"lua script\\" Packages: `game-mode` and `script`. All existing `library` packages will be automatically converted to `script` when loaded.\\n\\n\\n### RequirePackage\\n\\nTherefore, `Package.RequirePackage` will becomes unnecessary as well. As we can now reuse the same script globally, this method will be depreciated in favor of adding your package in the `package_dependencies` list of your Package\'s Package.toml.\\n\\n*Package requiring* the default `nanos-world-vehicles` or `nanos-world-weapons` will load them as a standalone Package, as now they **export** the `NanosWorldWeapons` and `NanosWorldVehicles` tables globally.\\n\\n\\n## GameMode Settings\\n\\nWe are introducing the concept of custom settings for game-modes! These settings can be defined in **Package.toml** like that:\\n\\n```toml\\n# game-mode custom settings configurations\\n[custom_settings]\\n    my_toggle = { label = \\"enable PVP\\", type = \\"boolean\\", description = \\"whether to enable PVP or not\\", default = true }\\n    my_text_input = { label = \\"type anything\\", type = \\"text\\", description = \\"custom text!\\", default = \\"hello world!\\" }\\n```\\n\\nThese settings can be configured through server arguments `--custom_settings \\"my_toggle = true, my_text_input = \'awesome text!\', ...\\"`, or through the New Game screen, which parses and displays the configuration dynamically when creating a new game:\\n\\n![](/img/blog/2022-december/new-game-settings.webp)\\n\\nThe values defined can be accessed through the new method `Server.GetCustomSettings()`.\\n\\nPlease refer to the updated [Documentation Page](https://docs.nanos.world/docs/next/core-concepts/packages/packages-guide#custom-settings) for more information.\\n\\n\\n## Configuration Files\\n\\nAs announced on previous blogs, the format of the configuration files are changing in the next update!\\n\\n:::tip\\n\\nAll **Package.toml** and **Assets.toml** in the old format will automatically self-convert to the new format as soon as they load for the first time.\\n\\n:::\\n\\n\\n### Meta Block\\n\\nNow we have a new common header among all **Assets.toml** and **Package.toml**: `[meta]`.\\n\\nIt will have the following format, which will be used to define general configurations mainly used by the store:\\n\\n```toml reference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_meta.toml\\n```\\n\\n\\n### Package\\n\\nFor the Packages, we will have a new format to differentiate their Types. Each Package type will have an independent and different block of configurations. Now the Package type will be determined by defining a block `[game_mode]`, `[script]` or `[loading-screen]`.\\n\\nThis is how a game-mode Package.toml will look like:\\n\\n```toml reference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_game_mode.toml\\n```\\n\\n\\n## Configuration Images\\n\\nAs you may have noticed, there is no more setting `image` on **Package.toml**, the same applies to **Assets.toml** and for the server image in the **Config.toml**.\\n\\nNow, the images should be physically placed next to the **.toml** file with the name `Package.jpg`, `Assets.jpg` or `Server.jpg`.\\n\\nThis is a standardization to solve the image inconsistency between the store and the config file, as well as to avoid external and malicious links to be placed there. But this brings the drawback that only dedicated servers can display an image on the Server List from now on.\\n\\n\\n## New Static Classes\\n\\nFinally we are releasing the update with all the Static Class refactoring! This will give us a great new organization to find things at the docs, as now specific methods will be grouped into classes with names that make sense!\\n\\nList of all new Static Classes:\\n\\n- [\ud83d\udcac Chat](https://docs.nanos.world/docs/next/scripting-reference/static-classes/chat)\\n- [\ud83d\udd24 Console](https://docs.nanos.world/docs/next/scripting-reference/static-classes/console)\\n- [\ud83d\udc1b Debug](https://docs.nanos.world/docs/next/scripting-reference/static-classes/debug)\\n- [\u260e\ufe0f Discord](https://docs.nanos.world/docs/next/scripting-reference/static-classes/discord)\\n- [\ud83c\udfdd\ufe0f Level](https://docs.nanos.world/docs/next/scripting-reference/static-classes/level)\\n- [\ud83d\udea2 Navigation](https://docs.nanos.world/docs/next/scripting-reference/static-classes/navigation)\\n- [\ud83d\uddbc\ufe0f PostProcess](https://docs.nanos.world/docs/next/scripting-reference/static-classes/postprocess)\\n- [\ud83c\udf05 Sky](https://docs.nanos.world/docs/next/scripting-reference/static-classes/sky)\\n- [\ud83c\udfae Steam](https://docs.nanos.world/docs/next/scripting-reference/static-classes/steam)\\n- [\ud83d\udd0d Trace](https://docs.nanos.world/docs/next/scripting-reference/static-classes/trace)\\n- [\ud83d\udcfa Viewport](https://docs.nanos.world/docs/next/scripting-reference/static-classes/viewport)\\n\\nAlso, [\ud83d\udd79\ufe0f Input](https://docs.nanos.world/docs/next/scripting-reference/static-classes/input) got a bunch of new methods and events as well from Client.\\n\\nMany of the methods from [\u2328\ufe0f Client](https://docs.nanos.world/docs/next/scripting-reference/static-classes/client) and the old **\ud83c\udf0d World** were migrated to those classes! Check their pages for accurate information!\\n\\n\\n## Renamed Events\\n\\nDue our last poll, we are starting to change all events names which were with wrong names. We are standardizing them to the present tense, so events like `CharacterEntered` will be renamed to `CharacterEnter` for example.\\n\\nAll changes will keep the old event working as deprecated. Please get attention to the new warnings to update them to the newer version!\\n\\n\\n## Assets Plugin Content\\n\\nNow it is possible to create Asset Packs from Plugin Content, this will be the preferred way of creating content from now on as it prevents assets paths colliding with others.\\n\\nFor that, we added a new setting in **Assets.toml** to define if the Asset Pack is a plugin content: `is_plugin_content`.\\n\\nPlease refer to the updated [Documentation Page](https://docs.nanos.world/docs/next/assets-modding/creating-assets/importing-assets) for more information.\\n\\n\\n## Store Improvements\\n\\nLast month MegaThorx launched an update to the store, which greatly improves the upload flow of new versions. Now we have a progress bar, as well as special scripts to verify for syntax errors and potential problems. More features will be added in the future as well!\\n\\n![](/img/blog/2022-december/store-upload.webp)\\n\\n\\n## Conclusion\\n\\nI was not very much satisfied on how nanos world was handling the possibilities of modding and scripting. It felt very limited and non natural the way scripters had to do to make packages to communicate with each other, it wasn\'t allowing much customization or extensibility.\\n\\nWith the last month\'s [Entity System](https://docs.nanos.world/docs/next/core-concepts/scripting/inheriting-classes) and now with this change to how Packages work, I feel that a huge door of possibilities has just opened even more, which will give a good breath to new things to be added!\\n\\nAn excellent example of what now is possible to achieve is creating a blank `script` package with a custom special inherited Weapon, and just loading the Sandbox game-mode together with your script to make it show up in the Spawn Menu, without needing any special call or workaround! This is huge and tie all the remaining knots! \ud83e\udd73\\n\\nThis change to a single VM was a big change, at first I thought it was not going to work, but after done and performing tests I was very surprised and happy with the results! Now we have to refine and improve it even more!\\n\\nModding goes brrr!! Thank you for the support! See you next month! \ud83d\udcaa\ud83d\udcaa"},{"id":"november-2022","metadata":{"permalink":"/de/blog/november-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-12-07-november.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-12-07-november.md","title":"2022 November: Entity System, UDS & UE5.1!","description":"Entity System, UDS & UE5.1!","date":"2022-12-07T00:00:00.000Z","formattedDate":"7. Dezember 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":8.2,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"november-2022","title":"2022 November: Entity System, UDS & UE5.1!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-november/november-news.webp"},"prevItem":{"title":"2022 December: One VM to Rule Them All!","permalink":"/de/blog/december-2022"},"nextItem":{"title":"2022 October: Playtest & Big API Refactor!","permalink":"/de/blog/october-2022"}},"content":"**Entity System, UDS & UE5.1!**\\n\\n![](/img/blog/2022-november/november-news.webp)\\n\\n\\n## Refactor Releases\\n\\nAs announced in the last Blog News, we are performing a series of refactoring in the API to standardize it better. We have a long list of changes and I\'m doing them gradually.\\n\\nThe main one that allowed us to make more changes without breaking compatibility is the `compatibility_version` released in the last update. This configuration on Package.toml will ensure that the package continues to work in future updates in cases of breakage changes.\\n\\nAlso we\'ve already got our first feature to try the **compatibility_version** system: the new `Events.SubscribeRemote` method! This method will subscribe only for remote called methods, splitting completely the behavior of subscribing for Local and Remote events. The change of this method caused a breaking change because all existing `Events.Subscribe` will no longer trigger with remote Events. But **compatibility_version** ensures that they continue to work until you update the value to version `1.22` or more recent.\\n\\nI\'m working on several Static Class refactoring as well and also changing some names of methods (e.g. `HTTP.RequestSync` will be standardized into just `HTTP.Request` and the async version would become `HTTP.RequestAsync`).\\n\\nI reinforce again that if you have suggestions on other changes such as event or methods names, do not hesitate to say it! Big refactoring opportunities like this are rare!\\n\\n\\n## Entity & Inheriting System\\n\\nThis is a very special update which I\'ve been working in the past months! \ud83e\udd73\\n\\nThe new Inheriting System is an addition that completely changes the paradigm of creating scripts! This system allows you to inherit existing classes to create your own custom classes and spawn them as if they were native!\\n\\n```lua\\n-- Creates a new Class called \\"MyNewClass\\" inheriting from Prop\\nMyNewClass = Prop.Inherit(\\"MyNewClass\\")\\n\\n-- Spawn it using the default constructor\\nlocal ent = MyNewClass(Vector(), Rotator(), \\"nanos-world::SM_Cube\\")\\n```\\n\\n\\n### Built-in Events\\n\\nNative events will return your class instead of the native class. E.g.:\\n\\n```lua\\n-- This will trigger for all Props and it\'s descendents,\\n-- and the value of \'prop\' will be the children itself\\nProp.Subscribe(\\"Destroy\\", function(prop)\\n    -- You can check if an entity is from a inherited Class type!\\n    -- IsA checks recursively if any parent is from that type\\n    if (NanosUtils.IsA(prop, MyCube)) then\\n        -- prop is of type MyCube\\n    end\\nend)\\n```\\n\\n### Custom Methods\\n\\nEasily add new methods to your class!\\n\\n```lua\\nMyNewClass = Prop.Inherit(\\"MyNewClass\\")\\n\\nfunction MyNewClass:MyMethod()\\n    -- Do something\\nend\\n```\\n\\n\\n### Custom Constructors\\n\\nThis system also allows the creation of personalized constructors:\\n\\n```lua\\n-- Creates a new Class called \\"MyCube\\" inheriting from Prop\\nMyCube = Prop.Inherit(\\"MyCube\\")\\n\\n-- Defines my constructor with any parameters you desire\\nfunction MyCube:Constructor(loc, rot)\\n    -- Do any kind of logic here\\n    loc = loc + Vector(0, 0, 100)\\n\\n    -- Calls Super Constructor to finalize the construction\\n    self.Super:Constructor(loc, rot, \\"nanos-world::SM_Cube\\")\\nend\\n\\n-- Spawn it using your custom constructor\\nlocal cube = MyCube(Vector(123, 456, 100), Rotator())\\n```\\n\\n\\n### Multiple Inheritance\\n\\nWe can inherit from other inherited classes as well!\\n\\n```lua\\nMyCube = Prop.Inherit(\\"MyCube\\")\\nMyMiniCube = MyCube.Inherit(\\"MyMiniCube\\")\\nMySuperMiniCube = MyMiniCube.Inherit(\\"MySuperMiniCube\\")\\n```\\n\\n\\n### Custom Entity Events\\n\\nNow we have the possibility to trigger remote events on custom Classes, to allow easy networking communication:\\n\\n```lua title=\\"Client/Index.lua\\"\\nfunction MyCube:OnMyAnotherEvent(my_param)\\n    Package.Log(my_param)\\nend\\n\\nMyCube.SubscribeRemote(\\"MyAnotherEvent\\", MyCube.OnMyAnotherEvent)\\n\\nlocal my_cube = MyCube()\\nmy_cube:CallRemoteEvent(\\"MyCustomEvent\\", 123)\\n```\\n\\n```lua title=\\"Server/Index.lua\\"\\nfunction MyCube:OnMyCustomEvent(player, my_param)\\n    self:BroadcastRemoteEvent(\\"MyAnotherCustomEvent\\", \\"hello\\")\\nend\\n\\nMyCube.SubscribeRemote(\\"MyCustomEvent\\", MyCube.OnMyCustomEvent)\\n```\\n\\n\\n### Global Registry\\n\\nThrough the parent class, we can get a list of all children classes of that class, having a global registry of all existing classes!\\n\\n```lua\\nlocal children_classes = ToolGun.GetInheritedClasses()\\nfor _, class in pairs(children_classes) do\\n    -- \'class\' is a custom inherited class! we can spawn it\\n    local p = class()\\nend\\n```\\n\\n\\n### Further Reading\\n\\nThere\'s much more! Like entity events or calling parent methods! Read about everything at the [Dedicated Documentation Page](/docs/next/core-concepts/scripting/inheriting-classes).\\n\\n\\n## Sandbox Improvements\\n\\nWith this new Entity System, I\'m taking the time to do some improvements in Sandbox game-mode, as now this system allows a better organization of how things interacts with each other.\\n\\n\\n### Entities\\n\\nI\'m converting almost everything into this Entity System, for example the Torch (Melee at spawn menu) now becomes a `Torch` entity inherited from `Melee`:\\n\\n```lua title=Server/Index.lua\\nTorch = Melee.Inherit(\\"Torch\\")\\n\\nfunction Torch:Constructor(location, rotation)\\n    self.Super:Constructor(location or Vector(), rotation or Rotator(), \\"nanos-world::SM_Torch\\")\\n    self:AddAnimationCharacterUse(\\"nanos-world::AM_Mannequin_Torch_Attack\\")\\n    self:SetImpactSound(SurfaceType.Flesh, \\"nanos-world::A_Punch_Cue\\")\\n    self:SetDamageSettings(0.5, 0.25)\\n    self:SetCooldown(1.5)\\n    self:SetBaseDamage(25)\\n\\n    local light = Light(Vector(), Rotator(), Color(1, 0.7, 0.4), LightType.Point, 100, 1000)\\n    light:AttachTo(self, AttachmentRule.SnapToTarget, \\"\\", 0)\\n    light:SetRelativeLocation(Vector(0, 0, 75))\\n\\n    local particle = Particle(Vector(), Rotator(), \\"nanos-world::P_Fire\\", false)\\n    particle:AttachTo(self, AttachmentRule.SnapToTarget, \\"\\", 0)\\n    particle:SetRelativeLocation(Vector(0, 0, 50))\\nend\\n```\\n\\nAnd we can spawn it like that:\\n\\n```lua title=Server/Index.lua\\nlocal my_torch = Torch(Vector(), Rotator())\\n```\\n\\n\\n### Spawn Menu\\n\\nI\'m trying to get rid of the \\"AddSpawnMenuItem\\" functions. And instead replace everything by the Inherit Registry System which you inherit from a Class and it shows up in the Spawn Menu like magic!\\n\\nFor example we are be able to `Melee.GetInheritedClasses()` and get all custom Melees Classes (like `Torch`) which were defined in this Package, and display them in the Spawn Menu automatically!\\n\\n\\n### Tools\\n\\nNow we will have a base class for the Tools called `ToolGun`. With that we can just inherit from this class to create new Tools, which will be automatically displayed on Spawn Menu and work as a Tool Gun!\\n\\nSee how the Balloon Gun is defined now:\\n\\n```lua title=Server/Index.lua\\nBalloonGun = ToolGun.Inherit(\\"BalloonGun\\")\\n\\nfunction BalloonGun:Constructor(location, rotation)\\n    -- Calls parent ToolGun constructor\\n    ToolGun.Constructor(self, location, rotation, Color.VIOLET)\\nend\\n\\nfunction BalloonGun:OnSpawnBalloon(player, location, ...)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Spawns a Balloon entity!\\n    local balloon = Balloon(location, rotation, ...)\\nend\\n\\nBalloonGun.SubscribeRemote(\\"SpawnBalloon\\", BalloonGun.OnSpawnBalloon)\\n```\\n\\nAnd on Client we just define it and set some properties which will be read from the Tool Gun and the Spawn Menu:\\n\\n```lua title=Client/Index.lua\\nBalloonGun = ToolGun.Inherit(\\"BalloonGun\\")\\n\\n-- Defines some properties used by ToolGun and SpawnMenu\\nBalloonGun.name = \\"Balloon\\"\\nBalloonGun.image = \\"package://sandbox/Client/Tools/BalloonGun.webp\\"\\nBalloonGun.tutorials = {\\n    { key = \\"LeftClick\\", text = \\"spawn balloon\\" },\\n    { key = \\"Undo\\", text = \\"undo spawn\\" },\\n    { key = \\"ContextMenu\\", text = \\"balloon settings\\" },\\n}\\n\\nfunction BalloonGun:OnFire(shooter)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Calls remote to spawn the Balloon\\n    self:CallRemoteEvent(\\"SpawnBalloon\\", location, rotation, ...)\\nend\\n\\nBalloonGun.Subscribe(\\"Fire\\", BalloonGun.OnFire)\\n```\\n\\nAnd that\'s it! No needs to call any \\"AddToSpawnMenu\\" function anymore! We just need to inherit a known class of it!\\n\\n:::tip\\n\\nNote we have defined a class called `Balloon` which is the new implementation of the balloon. \ud83d\ude09\\n\\n:::\\n\\n\\n### Context Menu\\n\\nAlso, I\'m doing some improvements on the Context Menu and make it more modular. Now it allows adding new entries dynamically, which I\'ll be integrating with the ToolGun systems to allow tools customization, look at this example of using the Balloon Gun with it:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-november/context-menu.webm\\" />\\n</video>\\n\\nThis new ContextMenu allows customizing it 100% through Lua, without needing to add new hardcoded HTML/JS entries on it.\\n\\n\\n## Unreal Engine 5.1\\n\\nThis month, Epic Games released [Unreal Engine 5.1](https://www.unrealengine.com/en-US/blog/unreal-engine-5-1-is-now-available). This is a long-awaited version for us, especially for the expected corrections.\\n\\nThe upgrade is being smooth, the hardest part of those upgrades is forcing everyone to upgrade it\'s assets and projects too.\\n\\n\\n### Physics and Cables\\n\\nCables rendering and Physics Constraints were completely broken since 5.0, I\'ve even reported that as bug to Epic and they fixed both problems but delayed the release just to 5.1.\\n\\nBut finally we can be happy again with the balloons physics working perfectly! \ud83d\ude0e\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-november/balloons.webm\\" />\\n</video>\\n\\n### Nanite & Lumen\\n\\nBoth system got great upgrades since 5.0, but one drawback of using the newest technologies is that we will need to enforce the game client uses DirectX 12, as it\'s a requirement for Nanite and some Lumen features to work.\\n\\n![](/img/blog/2022-november/nanite-01.webp)\\n\\n![](/img/blog/2022-november/nanite-02.webp)\\n\\nI will still do some studies on if we should or not force DX12, I don\'t want to have unforeseen consequences in the future by taking a decision like that.\\n\\n\\n## Ultra Dynamic Sky\\n\\n[Ultra Dynamic Sky](https://www.unrealengine.com/marketplace/en-US/product/ultra-dynamic-sky/) is one of best Unreal Marketplace Asset Packs, it provides a dynamic sky and weather solution for games!\\n\\nI decided to include this sky system natively in nanos world. It will replace our existing DefaultSun (on World class) with a new Static Class: `Sky`, which will be released soon\u2122 along with the Unreal 5.1 update!\\n\\nIf you don\'t know it yet, see this product video of your features:\\n\\n<iframe width=\\"620\\" height=\\"350\\" src=\\"https://www.youtube.com/embed/b52npy-XUdQ\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n## Conclusion\\n\\nThe update of the new entity system is huge! And I am very happy with the result, it\'s usability got really simple and that opens too many new possibilities!\\n\\nThis change will allow nanos world to advance to another level on scripting capabilities. I\'m studying more ways to allow even easier methods for creating custom scripts extensions, such as a way for you to create your entities that are dynamically loaded on a package, without you need to manually load them by `Package.Require` in the original package.\\n\\nJust by the fact that now we can simply define a new class inheriting from another and that is enough for it to be displayed in the Sandbox\'s Spawn Menu is already amazing!\\n\\nI wish to finish the still-going refactoring of the Static Classes, and also to start renaming some non-standardized Class methods. The compatibility mode feature will help a lot of us keeping things working with those changes. And as soon as possible my wish to release the UE 5.1 update to everyone, this last one will be the most painful one as require us to recook and update all assets in the store. \ud83d\ude1c\\n\\nAlso, I wish to start a discussion at Discord about the future of the [Extending Classes](/docs/next/core-concepts/scripting/extending-classes), it\'s currently working regardless of the new Inheriting system, but it has several problems that I want your opinion to decide the future of it.\\n\\nHope you enjoy it! Feedback appreciated! See you next month!"},{"id":"october-2022","metadata":{"permalink":"/de/blog/october-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-11-09-october.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-11-09-october.md","title":"2022 October: Playtest & Big API Refactor!","description":"Halloween Playtest, Big API Refactor and more!","date":"2022-11-09T00:00:00.000Z","formattedDate":"9. November 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":6.605,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"october-2022","title":"2022 October: Playtest & Big API Refactor!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-october/october-news.webp"},"prevItem":{"title":"2022 November: Entity System, UDS & UE5.1!","permalink":"/de/blog/november-2022"},"nextItem":{"title":"2022 September: Dimensions!","permalink":"/de/blog/september-2022"}},"content":"**Halloween Playtest, Big API Refactor and more!**\\n\\n![](/img/blog/2022-october/october-news.webp)\\n\\n\\n## Halloween Playtest\\n\\nThis month we had our annual Halloween \ud83c\udf83 event! As always, it has always been a moment of great evolution for nanos world! I would like to thank everyone who participated playing and the testers who participated creating content and game-modes for this event!\\n\\nThis year we had 4x more registered Playtesters than last year, and we hit several records in simultaneous players. And best of all, the game server managed to handle them all with ease \ud83d\ude4f! (except by the Vault that we had to increase the download limit during the event \ud83d\ude1c).\\n\\nDue to the event, we halted the updates for two weeks to focus only on bug corrections and improvements. We pushed more than 10 small patches with many bug fixes and improvements we\'ve found before the event to grant it\'s stability!\\n\\n![](/img/blog/2022-october/playtest-01.webp)\\n\\n![](/img/blog/2022-october/playtest-02.webp)\\n\\n\\n## Vehicle Improvements\\n\\nI did several improvements on the Vehicle class, allowing bigger customization on them.\\n\\n### New Default Vehicles\\n\\nWe\'ve added a new Vehicle Pack to the default nanos world vehicles pack. 4 of them are from a Feature free Marketplace pack (from the same creator of our previous one), and the Offroad is from Epic Games.\\n\\n![](/img/blog/2022-october/new-vehicles.webp)\\n\\n\\n### Animation Blueprints\\n\\nI\'ve added the possibility of loading custom Animation Blueprints on Vehicles, allowing the opportunity to have custom suspension animations like this one of the new Offroad vehicle:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-october/offroad.mp4\\" />\\n</video>\\n\\n### Dynamic Lights Texture\\n\\nNow it is possible to configure your vehicle with custom Material Parameters to turn it\'s Lights ON or OFF dynamically. You can find more info on how to configure your vehicles materials [here](/docs/next/assets-modding/creating-assets/skeletal-meshes/vehicles-meshes#adding-dynamic-head--tail-lights).\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-october/taillights.webm\\" />\\n</video>\\n\\n### New Subtle SFX\\n\\nAlso, I\'ve added new custom sounds effects to vehicles, such as pulling the handbrake, or wheels brake screeching for example which adds to the realism and immersion.\\n\\n\\n## Vault Text HTML Parser\\n\\nPreviously, as Vault item descriptions and changelogs were generated with HTML, we had CEF Browsers (WebUI) rendering them, but it was too much overkill and also quite disconnected from the rest of the UI.\\n\\nSo I decided to implement a custom HTML Parser to convert the HTML into proper Unreal Rich Text, having then a native renderer for the descriptions and changelog, making everything pretty again.\\n\\n![](/img/blog/2022-october/description.webp)\\n\\n![](/img/blog/2022-october/changelog.webp)\\n\\n\\n## Native JSON Parser\\n\\nI am migrating our current built-in JSON library to a native more-efficient JSON parser. With this new parser, we\'ve managed to reach 10x speed when parsing JSON strings! All methods will remain the same, just the implementation will change.\\n\\n```\\nBenchmark comparison: (9.5 MB JSON file)\\nBenchmark \'Lua JSON Parser\' (x10) took 9964ms.\\nBenchmark \'Native JSON Parser\' (x10) took 1057ms.\\n```\\n\\n\\n## Kill Z\\n\\nI implemented a built-in system for Kill Z. This is a system to destroying entities automatically when they reach too low heights, preventing some problems such as value overloading.\\n\\nCurrently the Kill Z offset is hardcoded for testing.\\n\\n\\n## Big API Refactoring\\n\\nThis refactoring update will come in a future update and it\'s not completely done yet, but I would like to advance some things that are planned to change. We know refactoring usually comes with several breaking changes, but this time I\'m working harder to make this update with zero breaking changes, keeping backwards compatibilities until you update your packages.\\n\\nIf you have more ideas for dramatical changes (such as renaming methods to maintain standard for example), please let us know so we can include in this big update!\\n\\n### Package Compatibility\\n\\nI will be introducing a new setting in the Package.toml for the \\"Compatibility Version\\", where you can configure the current version of the game that works with that package and if the game updates and any method that your package uses get modified, it will continue to work in a \\"compatibility mode\\" (with deprecated alerts).\\n\\nThis differs from the usual \\"deprecated warnings\\" because now in cases where the signature of a method changes the package will not stop working (as it happens today), and the old implementation/interface will still exist internally.\\n\\n\\n### Events\\n\\nCurrently events work by just subscribing and calling them local or remotely, but we cannot strict if we just want to receive them on a specific side. A new addition will be the subscription of remote-only events:\\n\\n```lua\\nEvents.SubscribeRemote()\\n```\\n\\nThis way only events called with `Events.CallRemote()` on the other side will trigger it. And also events subscribed with `Events.Subscribe()` will not receive remote events anymore.\\n\\n\\n### Module\\n\\nModules (Lua external binaries) will be reformed to become a type of Package. This way they can be shared easily and used by other packages, including through Vault.\\n\\n\\n### Configuration Files\\n\\nNow different Packages types will have different configuration files format (toml).\\n\\nFor example, the `loading-screen` package configuration currently have a lot of configuration which is not used by it (dependencies, assets, lua settings, etc). I want to have specific configuration files for each kind of Package (Modules, Loading Screen, Game-Modes, Libraries and Scripts), as also they will be loaded in different ways internally.\\n\\n\\n### Server, Package & Assets Image\\n\\nI\'m removing the `image` URL setting inside the configuration .toml files, instead the image should be placed besides the .toml with the name `Package.jpg`, `Assets.jpg` or `Server.jpg`. This will avoid some problems of the client accessing dangerous or bad external URLs.\\n\\n\\n### Multiple Constructors\\n\\nA feature that will be included is the possibility of multiple Constructors, a very good example is the Sound Class that has several parameters that depend if the sound is 2D or 3D:\\n\\n```lua\\n-- Current Constructor\\nSound(location, asset, is_2D_sound, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\\n\\n-- New 2D Sound Constructor\\nSound(asset, auto_destroy, sound_type, volume, pitch, loop_mode)\\n\\n-- New 3D Sound Constructor\\nSound(location, asset, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\\n```\\n\\nThis way you can spawn a 2D or 3D sound just by choosing the right constructor!\\n\\n\\n### Static Classes Renames\\n\\nThis will be a big organizational change! With each new update, some of our Static Classes are starting to accumulate lots of methods, and many of these are unrelated to each other.\\n\\nWith this in mind, we will split some Static Classes into new Static Classes, aiming at the best organization and especially the easy search and understanding of scripting API functions, some of the following listed methods may be renamed to reduce redundancy (e.g. to Chat.SendMessage).\\n\\nWe will have several new Static Classes, to list a few:\\n\\n`Chat`, `Console`, `Trace`, `Navigation`, `Debug`, `Viewport`, `Steam`, `Discord` and others.\\n\\nThe full list with all changes will be listed when the update is released. All of these changes, including it\'s Events will be warned as deprecated for use.\\n\\n\\n### Class Renames\\n\\nSome classes will also be renamed for better standardization. For example **Character** and **Vehicle** could become `CharacterMannequin` and `VehicleWheeled`, which allows new classes of other types e.g. `VehicleWater` or `CharacterGeneric`.\\n\\n\\n## Conclusion\\n\\nThis was a month of several fixes, improvements and rethinking the API as a whole, refactor is always a challenge as I need to maintain everything working and still rearrange the new interfaces of it, I don\'t want to rush this change.\\n\\nMy main objective now is finishing the organization of the API refactoring (please give me feedback of the changes mentioned on this blog!). Once this get finished, I will get more comfortable on adding new things and classes into it, I have many new features being developed in parallel that have not yet been announced, several of them are from your suggestions from Canny (cof cof [vote!](https://feedback.nanos.world) cof cof).\\n\\nThe result of the PlayTest was awesome! We had very few crashes and the server managed to handle very well the large amount of players!\\n\\nI\'m sure these upcoming improvements, including some not announced, will raise nanos world to another level of robustness!\\n\\nFinally, thank you for all the support!! See you next time!"},{"id":"september-2022","metadata":{"permalink":"/de/blog/september-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-10-05-september.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-10-05-september.md","title":"2022 September: Dimensions!","description":"Dimensions!","date":"2022-10-05T00:00:00.000Z","formattedDate":"5. Oktober 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":7.925,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"september-2022","title":"2022 September: Dimensions!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-september/september-news.webp"},"prevItem":{"title":"2022 October: Playtest & Big API Refactor!","permalink":"/de/blog/october-2022"},"nextItem":{"title":"2022 August: API, Auto Docs & More!","permalink":"/de/blog/august-2022"}},"content":"**Dimensions!**\\n\\n![](/img/blog/2022-september/september-news.webp)\\n\\n\\n## Dimensions \ud83c\udf0c\\n\\n![](/img/blog/2022-september/dimensions.webp)\\n\\nProudly I announce the implementation of one of the most requested features to be integrated into nanos world: **Dimensions**! \ud83e\udd73\\n\\n![](/img/blog/2022-september/dimensions-canny.webp)\\n\\n:::note\\n\\nIn this initial version, bugs, desyncs and weird things can happen, please let me know immediately!\\n\\n:::\\n\\nDimensions are separated worlds in the client-side, where players and actors are separated. By default all players and entities are in the dimension `1`. By moving a Player to another dimension, all entities that are not from that dimension will be destroyed to that player, and all entities in the new dimension will spawn for him.\\n\\nThe API is very simple:\\n\\n```lua\\nactor:SetDimension(number)\\n```\\n\\nBy sending an entity, their \\"children\\" will move too, examples:\\n\\n- When sending an **Actor**, all the other attached **Actors** will move as well.\\n- When sending a **Player**, the **Character** will move along.\\n- When sending a **Character**, the **Player** is not moved together. The **Weapons** or **Props** (and **attached**) will move.\\n- When sending a **Vehicle**, all passengers will also be sent.\\n\\nI also added a new method to facilitate the use of events:\\n\\n```lua\\nEvents.BroadcastRemoteDimension(dimension, event_name, params...)\\n```\\n\\nThis event will be sent to all players in that dimension.\\n\\nIf you send an entity through remote events that is not in the same dimension as the Player, the argument will be replaced by `nil` and a warning will show up.\\n\\n\\n## New Aim Block Animations\\n\\nI\'ve reworked the way weapons get blocked when facing obstacles. Before it was switching the AimMode to unaimed causing a really bad effect and even moving the crosshair a little.\\n\\nNow the weapon will bend procedurally and the AimMode won\'t change, improving a lot the game-play!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n        <source src=\\"/videos/blog/2022-september/aim-bend-01.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n        <source src=\\"/videos/blog/2022-september/aim-bend-02.webm\\" />\\n</video>\\n\\n## Server Sync Values\\n\\nNow it is possible to have global synced Values between Server and Client using `Server.SetValue()` method, with a new bool parameter `sync_on_clients`. Those values will exist on all clients through `Client.GetValue()` as usual.\\n\\n\\n## Blueprint Improvements\\n\\nOur Blueprint functionalities got boosted!\\n\\n### Event Dispatchers\\n\\n![](/img/blog/2022-september/dispatcher.webp)\\n\\nIt is now possible to bind to Blueprint Event Dispatchers from Lua! Making the communication from Blueprint to Lua now possible!\\n\\n```lua Client/index.lua\\n-- Spawns the Blueprint\\nlocal blueprint = Blueprint(Vector(), Rotator(), \\"my-asset-pack::BP_AwesomeBlueprint\\",)\\n\\n-- Subscribes to a Blueprint Event Dispatcher\\nblueprint:BindBlueprintEventDispatcher(\\"GorgeousDispatcher\\", function(self, arg1, arg2)\\n        -- arg1 is a string and arg2 is an integer\\n        Package.Log(\\"Called from Blueprint!\\", arg1, arg2)\\nend)\\n```\\n\\nYou can find more examples at our new documentation page: [Blueprint Communication](/docs/next/getting-started/tutorials-and-examples/blueprint-communication)!\\n\\n\\n### Function Return Values\\n\\nIt is also now possible to retrieve return values in Lua from Blueprint Functions!\\n\\n\\n### Passing Actors through\\n\\nAnd we can pass actors through parameters into and from Blueprints calls, they will be properly parsed into the correct entity when receiving or sending from Lua! E.g. You can create a Blueprint event which receives a `Character` or `Actor` as parameter, and pass it through Lua, it will be automatically parsed and marshalled to the correct Blueprint variable type!\\n\\n\\n## Scripting Events Variables\\n\\nNow our internal variables use 8 bytes for passing floats and integers, allowing higher values from being passed through events (network ones too)!\\n\\n\\n## Tick Performance Boost\\n\\n![](/img/blog/2022-september/tick-performance.webp)\\n\\nI managed to improve a lot the performance when having thousands of entities spawned (most were caused by Level StaticMeshes. I implemented smart algorithms to improve when they will perform Tick calculations for certain entities based on distance and real need to tick an entity.\\n\\nThis improved the CPU usage in almost 10x in some cases!\\n\\n\\n## Client Side Network Authority\\n\\nAn experimental feature which has been added is the ability to allow methods of being called in the client-side if the player is the network authority of that entity.\\n\\nFor example now it is possible to call `TranslateTo`, `RotateTo`, `SetForce`, `AddImpulse`, `SetWeaponAimMode` and `SetViewMode` from client side! Which can improve a lot of Sandbox Physics Gun behavior for example!\\n\\n![](/img/blog/2022-september/physics-gun.webp)\\n\\n\\n## WebUI Native Tables\\n\\nNow you don\'t need to `JSON.stringify()` tables to pass to WebUI events anymore! You can pass them directly as the arguments and it will be natively parsed, which means much more performance when passing big tables around, and also you don\'t need to worry about stringifying or parsing them anymore as they already come as native table as the parameter!\\n\\n\\n## File JSON Parser\\n\\nOur File entity got a new method to natively load a JSON file and get it\'s table into Lua:\\n\\n```lua\\nFile.ReadJSONAsync()\\nFile.ReadJSON()\\n```\\n\\nAnd we\'ve got a big performance improvement compared to reading it as raw string and using the Lua JSON library:\\n\\n```\\nBenchmark comparison loadinga big JSON file (9.5 MB)\\nParsing it with Lua JSON library: took 9964ms.\\nParsing it with Native JSON parser: took 1057ms.\\n```\\n\\n\\n## CEF Improvements\\n\\n### Ladebildschirm\\n\\nI finished integrating CEF into the Loading Screen and now Ultralight has been completely removed from nanos world.\\n\\nAlso we got a new feature for Loading Screen: the ability to stop the Main Menu music! For that you need to call an event from JS:\\n\\n```js\\nEvents.Call(\\"StopMenuMusic\\");\\n```\\n\\n### Better Error Handling\\n\\nThe error handling has been improved as well, before we didn\'t get feedback of errors when loading invalid files and now we have.\\n\\n\\n## Character Blend Spaces\\n\\nNow it is possible to import custom Locomotion Blend Spaces to your Characters. You can override Standing, Crouching and Proning animations. And also set the transition animation between them!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n        <source src=\\"/videos/docs/assets-modding/character-locomotion-01.webm\\" />\\n</video>\\n\\nWe\'ve got new API methods for that:\\n\\n```lua\\nCharacter.SetAnimationIdleWalkRunStanding(anim_path, enable_tip)\\nCharacter.SetAnimationIdleWalkRunCrouching(anim_path, enable_tip)\\nCharacter.SetAnimationIdleWalkRunProning(anim_path)\\n\\nCharacter.SetAnimationsTransitionStandingCrouching(anim_standing_to_crouching, anim_crouching_to_standing)\\nCharacter.SetAnimationsTransitionCrouchingProning(anim_crouching_to_proning, anim_proning_to_crouching)\\n```\\n\\nYou can find more examples at our new documentation page: [Character Locomotion Animations](/docs/next/assets-modding/creating-assets/animations/characters/character-locomotion-animations)!\\n\\n\\n## Precaching Assets\\n\\nNow it is possible to precache assets to make them load in Loading Screen (avoiding FPS spikes during game), for that you can just call:\\n\\n```lua\\nAssets.Precache(asset_path)\\n```\\n\\n:::note\\n\\nAll Assets are already precached automatically once referenced, so this new method is useful when you need to precache Assets which will be used in the future or loaded dynamically.\\n\\n:::\\n\\n\\n## Better Wallbang\\n\\nOur firing wallbangs were not working properly and I decided to rework it. Now wallbanging water reaches 10x further and causes more damage (before it was not possible to penetrate Water with bullets).\\n\\nWe\'ve also got a new Debug settings to draw Weapon\'s bullet traces in the world, very useful for debugging:\\n\\n![](/img/blog/2022-september/wallbang.webp)\\n\\n\\n## Menu Improvements\\n\\n### Framerate\\n\\nOur Main Menu got some improvements, we FPS limit has been hardcoded increased to 120 (was 60) and during loading to 60 (was 30), it is still not great as I want to limit it to monitor refresh rate automatically.\\n\\n\\n### Labels\\n\\nOur tabs got new labels to improve the User Experience, mainly when creating a New Game. Now it is possible to know how many dependencies you have selected without needing to enter that menus:\\n\\n\\n### New Game\\n\\nAlso in the New Game menu, now all configuration (including dependencies) are loaded from disk\'s Config.toml file. So we don\'t need to keep reconfiguring it every time when starting a server!\\n\\n![](/img/blog/2022-september/new-game.webp)\\n\\n\\n## Debug Settings\\n\\nWe got 3 new debug settings:\\n\\n- `Visualize Bullet Traces`\\n- `Visualize Vehicle Doors`\\n- `Visualize Character Capsule`\\n\\n![](/img/blog/2022-september/character-capsule.webp)\\n\\n\\n## Miscellaneous Improvements\\n\\nSome other improvements and small new features we\'ve got during this month:\\n\\n- Vehicle now receives `TakeDamage` event!\\n- It is now possible to toggle a bunch of SceneCapture rendering features with `SetShowFlags()` new method.\\n- Our console got several improvements on client side.\\n- It is now possible to draw Materials, WebUI and SceneCapture into `Canvas` (experimental)!\\n- I implemented in the scripting API a way to have multiple return values, so some methods will start getting that!\\n- Now Databases will return an error parameter if anything failed.\\n- All Character interaction (grab Prop, pickup Weapons, enter vehicles) were reworked, and now the traces are 100% precise when interacting with big objects. Also I striped the extra components needed for that, which will improve performance with too many interactable objects spawned.\\n\\n\\n## Conclusion\\n\\nWe had many significant advances this month! Blueprint improvements were a great achievement for me because I had to do a monstrous reverse engineering on Unreal and several memory magic to intercept events.\\n\\nThe addition of dimensions was a very much requested feature and greatly expands the limits for game creation!\\n\\nPerformance improvements are always very welcome and I love to make them, we still have a lot of room for further improvements!\\n\\nFurthermore, I devoted some time to work on some big refactoring internally, some parts of the code were starting to get dumped and messy, and they are not using the most modern C++20 techniques. Sometimes these refactoring are great to take the control back over our own code. \ud83d\ude04\\n\\nIn the next updates, I plan to reorganize the API (as discussed in our last #poll), we added methods which started accumulating in Static Classes without much cohesion between them. I intend to separate them and create new static classes for each, making the understanding and search for methods in the API much easier.\\n\\nAnother improvement I started to implement is the possibility of multiple constructors for entities. Which will allow we to have smaller ways to spawn the entities. This will be very useful if we want to spawn a Sound 2D or 3D for example (2D sound does not need the location parameter).\\n\\nThis is all this month, I see you next month with many more improvements and news! Thank you so much! \ud83d\udc96"},{"id":"august-2022","metadata":{"permalink":"/de/blog/august-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-09-02-august.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-09-02-august.md","title":"2022 August: API, Auto Docs & More!","description":"Open Source API, Auto-generated Documentation & More!","date":"2022-09-02T00:00:00.000Z","formattedDate":"2. September 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":5.96,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"august-2022","title":"2022 August: API, Auto Docs & More!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-august/august-news.webp"},"prevItem":{"title":"2022 September: Dimensions!","permalink":"/de/blog/september-2022"},"nextItem":{"title":"2022 July: CEF, Settings Menu & Improvs!","permalink":"/de/blog/july-2022"}},"content":"**Open Source API, Auto-generated Documentation & More!**\\n\\n![](/img/blog/2022-august/august-news.webp)\\n\\n\\nAnother month has passed, and here is a summary with the things that happened during that!\\n\\n## Open Source API\\n\\n[![](/img/blog/2022-august/api.webp)](https://github.com/nanos-world/api)\\n\\nThis month we, with the help of the entire community, created the [Official nanos world API](https://github.com/nanos-world/api), which is an organized set of all Classes, Static Classes, Utility Classes, Structs, and all their Functions and Events. We made this in order to have an official place where all the scripting of nanos world can be obtained.\\n\\n\\n## VSCode Extension\\n\\n[![](/img/blog/2022-august/vscode.webp)](https://marketplace.visualstudio.com/items?itemName=Derpius.nanosworld)\\n\\nWith the API, it was possible to professionalize the extension of [nanos world for VSCode](https://marketplace.visualstudio.com/items?itemName=Derpius.nanosworld), created by **@Derpius**. Now it uses the API to generate all the Lua stubs!\\n\\nThis way, all updates made in the API reflect directly on the extension for VSCode, being always updated!\\n\\nDon\'t forget to rate it \ud83d\ude09.\\n\\n\\n## Smart Documentation\\n\\nOur docs pass through a complete refactor under the hood! Now all **Scripting Reference** pages are generated automatically using our new API! This is a big step forward as before I was writing each function separately in each page. Now I just need to update a single JSON and the docs gets structured properly!\\n\\nNot only the automatization, but now we have some interactive popups, which display more information of a Class/Struct/Function when you hover it! This will help a lot newcomers understanding the basics of nanos world!\\n\\n![](/img/blog/2022-august/docs-01.webp)\\n\\n![](/img/blog/2022-august/docs-02.webp)\\n\\n\\n## New UI (Console & Chat)\\n\\nI\'ve updated our remaining old design UIs for the Console and the Chat! Now they belong to the same style as the menus!\\n\\n![](/img/blog/2022-august/chat.webp)\\n\\n![](/img/blog/2022-august/console.webp)\\n\\n\\n## New Profiling Stats\\n\\nI\'ve added a real time profiling view to display performance information of the game and scripting. It displays the accumulated time spent on an operation and the average in the frame in the last second.\\n\\nIt is really useful for debugging and finding bottlenecks in both core game and in your packages! It displays individual events for each packages and the time they are taking to execute.\\n\\n![](/img/blog/2022-august/profiling.webp)\\n\\n\\n## Trigger Whitelist\\n\\nNow Trigger can have a list passed in the constructor to only trigger for specific classes! This helps scripters to care more about performance and reduces the amount of validation needed in Lua side to check if an entity triggered is of the type we want!\\n\\n```lua\\n-- Triggers only Characters and Vehicles\\nlocal trigger = Trigger(\\n  Vector(),                   -- location\\n  Rotator(),                  -- rotation\\n  Vector(100),                -- extent\\n  TriggerType.Sphere,         -- trigger_type\\n  true,                       -- is_visible\\n  Color(1, 0, 0),             -- color\\n  { \\"Character\\", \\"Vehicle\\" }  -- overlap_only_classes\\n)\\n```\\n\\n\\n## SceneCapture Render Only\\n\\nSceneCapture got new methods to render only actors set manually through parameters. This allow transparent backgrounds when rendering just a specific Entity (a Character for example).\\n\\n```lua\\nSceneCapture.AddRenderActor(actor)\\nSceneCapture.RemoveRenderActor(actor)\\nSceneCapture.ClearRenderActors()\\n```\\n\\n\\n## Melee Improvements\\n\\nThe Melee class got several improvements including new methods and events to make it even more flexible. You can now set a list of Attack Animations and Impact Sounds depending on the surface it hits! Also it got a new event **Attack** when the attack happens. Not to mention several bug fixes and improvements have been made on Melees too!\\n\\n```lua\\nMelee.AddAnimationCharacterUse(asset_path, play_rate, slot_Type)\\nMelee.SetImpactSound(surface_type, asset_path, volume, pitch)\\n```\\n\\n\\n## New Traces\\n\\nI added two new Trace methods `Client.TraceLineSingle()` and `Client.TraceLineMulti()` replacing the old Trace. Those new methods now receive a `trace_mode` parameter which supports several parameters being passed as bitwise flags, this new way of passing parameters is great for future updates as it doesn\'t add breaking changes and also reduces the amount of parameters needed in the method.\\n\\nYou can for example pass it like:\\n\\n```lua\\n-- Traces complex collisions, returns the entity as the Entity table value and draws a debug line in the world.\\nTraceMode.TraceComplex | TraceMode.ReturnEntity | TraceMode.DrawDebug\\n```\\n\\n\\n## Performance Improvements\\n\\nI am constantly working on improving the performance, this is one of my main priorities. And now with the new profiling stats, we are being able to find the bottlenecks faster!\\n\\nWe\'ve got great improvement on performance while Aiming and on Blood decals/particle spawns. Now Blood takes into consideration all levels of Effects Scalability settings to spawn more/less depending on that.\\n\\nI am aware of a \\"problem\\" causing performance hit when spawning some dozens of thousands of entities (Entity Tick time) and I\'m thinking on a solution to solve that. The problem comes because each entity is \\"ticked\\" every frame, so thousands of entities means thousands of more ticks per frame.\\n\\n\\n## Native LoadPackage\\n\\nI did an great improvement on `Package.LoadPackage()` method to make a native load of Lua code. So anything you return in the loaded file will be properly receiving in the loader side! Before it was doing an ugly and weird serialization/deserialization of the returned data, and now it behaves like the native operator!\\n\\n\\n## CEF Improvements\\n\\nI am still constantly improving and adjusting the edges of integration with CEF. This last month I fixed several bugs and crashes and worked on performance improvements, there are still some points to be improved and there is one bug in my concern to be corrected.\\n\\nAlso, I\'m always going to keep our CEF version up-to-date, it was just updated to **104.4.26** so our version did to!\\n\\n\\n## New Game Settings\\n\\nOur Settings got new options which can be changed:\\n\\n- `draw network debug in the world`\\n- `display network stats in the screen`\\n- `auto realign camera`\\n- `fov can be altered by gameplay`\\n\\n\\n## Auth Website Redesign\\n\\n![](/img/blog/2022-august/auth.webp)\\n\\n@MegaThorx worked on big refactoring on our [Auth](https://auth.nanos.io) website, it now supports Dark Mode and a new UI/UX for better usability!\\n\\n\\n## Tons of Bug Fixes\\n\\nIt worth mentioning the tons of bug fixes and improvements we got this month, it\'s all written in the changelogs in our Discord.\\n\\nSome examples are: a bug causing a Deadlock in the server when using Triggers (the server was freezing), a bug causing crashes when using coroutines, duplicating logs, UX problems, Server Cache not working (loading taking minutes), Main Menu crashes, and much more!\\n\\n\\n## Community Highlights\\n\\nA huge shoutout for the French \ud83c\uddeb\ud83c\uddf7 community  hich has grown a lot on the server! And especially to [Mouloud](https://www.youtube.com/channel/UCnvxGZY1uFrXHNRu3MqMIBg) that is creating amazing packages for nanos world!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/VeStKCAokgg\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Y-3T6qZfXgo\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n## Conclusion\\n\\nA lot of things being improved and bugs being fixed, the creation of API and Docs\'s self-generation are life changing (especially for me as it\'s now much easier to update docs with new things) and also for all scripters that can rely on the VSCode extension which is 100% backed on the official API.\\n\\nOnce again I reinforce the importance of posting and voting for ideas in our [Feedback Hub](https://feedback.nanos.world). E.g. it\'s clear that the greatest need for everyone at the moment are the Dimensions \ud83d\ude1c.\\n\\n![](/img/blog/2022-august/issues.webp)\\n\\nAnd also don\'t be reluctant to post bugs in our [Issue tracker](https://issues.nanos.world). The chances of your bug being fixed increases by 10000% if you post it there.\\n\\n![](/img/blog/2022-august/ideas.webp)\\n\\nThat\'s it for this month, once again thank you all for the support!!!"},{"id":"july-2022","metadata":{"permalink":"/de/blog/july-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-08-03-july.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-08-03-july.md","title":"2022 July: CEF, Settings Menu & Improvs!","description":"CEF, Settings Menu & several Improvements!","date":"2022-08-03T00:00:00.000Z","formattedDate":"3. August 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":6.55,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"july-2022","title":"2022 July: CEF, Settings Menu & Improvs!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 August: API, Auto Docs & More!","permalink":"/de/blog/august-2022"},"nextItem":{"title":"2022 June: Birthday, Rebrand & UI Redesign!","permalink":"/de/blog/june-2022"}},"content":"**CEF, Settings Menu & several Improvements!**\\n\\n\\nAfter a long time and after innumerous requests (~~and death threats~~), I finally announce the big surprise of the integration with the Framework [CEF (Chromium embedded framework)](https://bitbuccket.org/chromimbedded/cef/)!\\n\\n## Chromium Embedded Framework\\n\\n![](/img/blog/2022-july/cef.webp)\\n\\nFor those who are not familiar, CEF is a framework for embedding chromium-based browsers in other applications. Roughly our `WebUI`.\\n\\nUntil then we have been using our dear [Ultralight](https://ultralig.ht/), which at first was very promising, but as it is a proprietary library and unfortunately the dev ended up devoting less time to the project, we started to get harmed by missing features or unsolved bugs.\\n\\nAnd since we can\'t be dependent on that, I made the decision to try to integrate the much consolidated framework CEF. But it was not an easy implementation at all. CEF uses various sub-processes to work, which I figured out I would have to implement on my own. I got several chills while remembering my Operating Systems classes from College. \ud83d\ude1c\\n\\nIn the end, I managed to create a totally proper integration, including a build automation to always get the latest CEF safety updates on D+1!\\n\\n\\n### Processes\\n\\nBut since not everything is flowers, there are advantages and disadvantages in using CEF. Due to its multi-process characteristics, on the one hand we have everything running in parallel (+++performance), on the other we have the drawback that rendering will always be 1 or 2 frames late, which may cause an \\"input lag\\" effect, but in practice it is not a big problem and is almost imperceptible.\\n\\nCEF uses sub-processes, which means that each WebUI will run totally independent of the game and other WebUIs, making usage of 100% of computational power with great efficiency!\\n\\nAnd that means now all communication is asynchronous. Thus, all the events between Lua <-> WebUI are also asynchronous and this is a paradigm that has changed, which should not be a problem in most cases. But this is an \\"effect\\" from having parallelism.\\n\\nAnother thing that changed is that we will have several sub-process starting and closing (like Chrome \ud83d\ude1d) while playing nanos world. It depends on the amount of spawned WebUIs and is automatically managed by CEF.\\n\\n![](/img/blog/2022-july/cef-subprocess.webp)\\n\\n\\n### Sounds\\n\\nAnother thing we gained was the Sounds! I have added a new method to the WebUI class: `WebUI:SpawnSound()` that spawns a Sound object (100% customizable as usual). In other words, you can spawn as many 3D sound entities and even set up a 7:1 cinema with them! \ud83d\ude06\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-july/cinema.webm\\" />\\n</video>\\n\\n### Performance\\n\\nAs said, we gained a lot of performance. Surely I will continue to improve the implementation and boost it even more over time, but we can already see great improvements! Watch this video of me spawning dozens of WebUIs at the same time and rendering them on 3D objects in the world without a single stutter:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-july/webui-everywhere.webm\\" />\\n</video>\\n\\nHow many videos can it handle at the same time? YES.\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-july/cinema-everywhere.webm\\" />\\n</video>\\n\\n### Debug Tools\\n\\nIt is now possible to inspect your WebUI directly by third party tools, such as Chrome Developer Tools for example! \ud83e\udd73\\n\\n![](/img/blog/2022-july/cef-debug-tools.webp)\\n\\n\\n### Migration\\n\\nAlso, another good news: this migration will have 0% breaking changes! No script will need to be updated to keep working with CEF! \ud83d\udc83\\n\\nObviously some things have changed, especially in relation to CSS. In WebKit browsers (as it was before) some styles behaved differently from Chromium ones. Some layouts *can* appear ill-adjusted (e.g. different scroll bars) now.\\n\\n\\n## Settings Menu\\n\\nFinally our Settings Menu received the UI Update too! I recreated it from scratch adapting to the new interface style!\\n\\n#### Video Settings:\\n\\n![](/img/blog/2022-july/settings-video.webp)\\n\\n#### KeyBinding Settings:\\n\\n![](/img/blog/2022-july/settings-keys.webp)\\n\\nWe got a new setting tab for **House Keeping**, where it will be possible to clean up cache files, logs and other files from your installation:\\n\\n![](/img/blog/2022-july/settings-house.webp)\\n\\nWe also had the addition of a new setting: **Force no Custom Loading Screen** which disables server\'s custom Loading Screens.\\n\\n\\n## Stats & Achievements\\n\\nThis month I devoted a time to adjust our stats and achievements. And the new **Profile Stats** tab have been implemented:\\n\\n![](/img/blog/2022-july/stats.webp)\\n\\nI created some new Stats such as swimming or driving, and also I created the concept of \\"Achievements Ranks\\", adding levels bronze, silver and gold to them. Let\'s see how this model stands out. \ud83d\ude09\\n\\n![](/img/blog/2022-july/achievements.webp)\\n\\nA great improvement in the notifications of achievements has been made: now they are shown immediately when reached! (Before they were only synchronized once per minute, delaying the notifications).\\n\\n\\n## New Achievements Ideas\\n\\nI created a new page on Canny to receive suggestions of new Steam Achievements! Please take a look, vote and add new ones! I will always be integrating new ones into the game!\\n\\nhttps://feedback.nanos.world/achievements\\n\\n\\n## Vault Changelog\\n\\nIn Vault side, I implemented the **Updates Tab** for the items, where you can see all changes in their updates!\\n\\n![](/img/blog/2022-july/vault-changelog.webp)\\n\\n\\n## Caching and Loading\\n\\nA great improvement I made was the refactoring of the caching system. We already had a cache system that cached the loaded assets in the client side, so then the file validation was instantaneous when re-connecting to a server.\\n\\nI refactored this system, and now all cache files are in an external folder (inside `Packages/` and `Assets/` called `.cache/`), which even facilitates their cleaning.\\n\\nIn addition, when opening a server, every time the assets were loaded and cached in memory, which was really slow. And with this new system, they are still loaded but much faster, the system intelligently identifies changes and only re-caches the files that get dirty since the last load.\\n\\nThis will greatly improve the opening speed of the servers.\\n\\n\\n## Docs Improvements\\n\\nI took some time to update some pages here in the docs.\\n\\n- [Quick Start](/docs/next/getting-started/quick-start) is now even more quick and easy!\\n- [Server Installation](/docs/next/core-concepts/server-manual/server-installation) was reworked and split and now is straight to the point.\\n- [Assets & Modding](/docs/next/assets-modding/creating-assets/setting-up-ue) category got a rewrite so the guides are more linear and have less ambiguity.\\n- [Static Mesh](/docs/next/assets-modding/creating-assets/static-meshes) was completely rewritten and now have lots of new information and tips!\\n\\nI will continue to improve the docs aiming to reduce redundancy and to make it even more simple for modders and scripters to hop in! I see the docs was starting to get a little big confusing due some duplicities and some tutorials in weird places, that will be improved too!\\n\\n\\n## Notable Changes\\n\\n*Some smaller but notable changes.*\\n\\n\\n### WebUI 3D Interaction\\n\\nThis is not totally related to CEF but I took the moment to integrate methods which allow injecting events into WebUI and create a Remote Control for it: \ud83d\ude1c\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-july/remote-control.webm\\" />\\n</video>\\n\\nIt uses traces to retrieve the UV location from the hit on the TV mesh, then redirects it as WebUI events.\\n\\n\\n### Packages Maps\\n\\nI added a new setting to Packages: `compatible_maps` to make pair with the map settings: `compatible_game_modes`. Both settings are united to display compatible maps in the New Game popup when starting a new server.\\n\\n\\n### Discord FAQ Channel\\n\\nOur Discord got a new FAQ channel, which contains the most common question about the nanos world. More will be added as the time goes!\\n\\n\\n### Unreal 5.0.3\\n\\nI\'ve updated the game Unreal Engine version to the last patch 5.0.3 containing lots of engine bug fixes. This update had no breaking change.\\n\\n\\n## Conclusion\\n\\nThis was a month of great advances, several bug fixes and structural improvements in nanos world. We further evolved our IU and solved the WebUI problem that had been haunting us for a long time.\\n\\nI emphasize the importance of creating and supporting ideas at https://feedback.nanos.world/. It is very important to have them officialized that to know your most request demands! Here\'s July Feedback summary:\\n\\n![](/img/blog/2022-july/canny-july.webp)\\n\\nThank you a lot! You are the best!"},{"id":"june-2022","metadata":{"permalink":"/de/blog/june-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-07-07-june.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-07-07-june.md","title":"2022 June: Birthday, Rebrand & UI Redesign!","description":"Birthday, Rebrand & UI Redesign!","date":"2022-07-07T00:00:00.000Z","formattedDate":"7. Juli 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":9.59,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"june-2022","title":"2022 June: Birthday, Rebrand & UI Redesign!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 July: CEF, Settings Menu & Improvs!","permalink":"/de/blog/july-2022"},"nextItem":{"title":"2022 May: 666 Bugs Fixed & P2P!","permalink":"/de/blog/may-2022"}},"content":"**Birthday, Rebrand & UI Redesign!**\\n\\n\\n## nanos world Birthday \ud83e\udd73\\n\\nFirst of all, we would like to announce that this last week was the birthday of **3 years** of nanos world *under heavy development!* Of course the idea of creating it is older than that.\\n\\nIt has been already a long time since we started working on it, and it has been a time of much learning for me and a lot of progress for nanos world!\\n\\nI would like (again) to thank you all for the great support over all this time! I really love working on nanos world and love seeing you playing, using and creating on it! Making nanos world has become one of the great passions of my life \ud83d\ude0d!\\n\\n\\n## Rebrand\\n\\nnanos world always has been about **multiple worlds**, more specifically **YOUR** worlds which you can express yourself and create the universe you always wanted to.\\n\\nWith the progress of the game development, it has become necessary to evolve in some aspects. When it comes to marketing, the main objective is to deliver nanos world to the right potential players and for this to be possible we had to rethink some things, and one of the things was to recreate our **visual identity**!\\n\\nOur old identity lacked in some aspects regarding discoverability and professionalism, so we decided that it was time to make a new version of it! We know that it is possible that this is not yet the definitive version and it will be improved over time, however it\'s already a big step towards our short-medium term goals!\\n\\n\\n### New Logo\\n\\nFor the logos we aimed to have something more minimalistic yet professional.\\n\\nSince **nanos world** represents a wide range of game-modes and diverse worlds, we decided to create a new version of our current logo, with:\\n\\n- \ud83d\ude2e A flat outlined style.\\n- \ud83e\udd2f New title and the subtitle design & fonts.\\n- \ud83d\ude36\u200d\ud83c\udf2b\ufe0f The **ring** became an **infinity symbol** bringing the sense of unlimited.\\n\\n![](/img/blog/2022-june/old-logo.png)\\n\\n![](/img/blog/2022-june/arrow-down.png)\\n\\n![](/img/blog/2022-june/rebrand-side-side.png)\\n\\n\\n### New Cover Art\\n\\nTo express the idea of diversity, we are creating a new cover art to be used as Capsule Arts on Steam and of course to contribute to the visual identity!\\n\\nSo we idealized the creation of a living planet with many things happening representing the variety of game-modes in nanos world, as a Sandbox game should be.\\n\\nThis will be a huge image (8-16K), which each time you zoom in you will find something new (the full size image will be available in-game and on the website\u2122 \ud83d\ude09)!\\n\\n:::caution note\\n\\nThe Cover Arts are not final and are still in development by the artist\u2122, some adjusts will still be made for the final version!\\n\\n:::\\n\\n![](/img/blog/2022-june/world-full.webp)\\n\\n\\nSome *WIP* Capsule Art sketches:\\n\\n![](/img/blog/2022-june/rebrand-cover-arts.webp)\\n\\n:::tip\\n\\nCredits to [Pablo (PG Ninja)](https://www.artstation.com/pablo_pg) for creating the Art.\\n\\n:::\\n\\n\\n### Motivation\\n\\nA very important factor, even within Steam, is how your game promotes itself. And this happens due to two main factors: Capsule Arts & Steam Tags.\\n\\nThe Steam Tags determine whether or not your game will be displayed to the ones browsing Steam store. And the Capsule quality determines whether they will click on your game, Capsule Arts are the first thing seen by the shoppers, they appear in store browser list or when opening the game page.\\n\\nOur current Capsule is this tedious screenshot with a simple text overlay \ud83d\ude05:\\n\\n![](/img/blog/2022-june/steam-capsule-current.webp)\\n\\nThis is even extremely contraindicated because it shows amateurism and makes those who browse Steam unconsciously ignore it, in addition to the fact that the image does not convey the genre of the game, making those interested in sandbox games do not click on the page.\\n\\n![](/img/blog/2022-june/steam-page-current.webp)\\n\\nThen for this first version of our Cover Art we wanted to make it a little bit more professional and that at least minimally communicates the \\"**Sandbox**\\" genre.\\n\\n\\n### Inspirations\\n\\nOur idea was to create an image of a living planet with various things happening, representing the variety of a sandbox game, so we got some inspiration from game arts and images that represent this idea, like the game Universim and some found stock images:\\n\\n![](/img/blog/2022-june/inspiration.webp)\\n\\n\\n### Sketches\\n\\nOur creative process went through some sketches made in Paint, until reaching the current on-going version: \ud83d\ude1c\\n\\n![](/img/blog/2022-june/sketches.webp)\\n\\n\\n## Menu Redesign\\n\\nIn addition to the rebrand, we worked hard on redesigning the main menus of nanos world!\\n\\nFirst of all, we would like to thank everyone who gave ideas and suggestions for the new design, especially Falaxir who created several threads of ideas related to it, which served as extreme inspiration for us to develop this new version!\\n\\n\\n### Motivation\\n\\nThe main menu is the gateway for all players and the first impression when playing, it needs to be intuitive and to encourage the right actions to be chosen.\\n\\nWe take into account the following pillars:\\n\\n- \ud83c\udfae **Players First**: It must take into consideration the common player as first, those who will choose a game-mode or just connect to a server to play and have fun.\\n- \ud83d\udc23 **Noob Friendly**: It should be extremely easy and intuitive to start a new game or adding custom addons to it. Even those who don\'t know anything about servers should be able to easily start a game to play with friends.\\n- \ud83e\udd0f **Less is More**: The User Experience must be the best possible. Buttons and Navigation must be intuitive without need of explicit tutorials or texts.\\n- \ud83c\udf43 **Fluidity**: New pages must open immediately, no stutters should happen, filters should apply changes instantly, no desync between pages and data should happen.\\n- \ud83e\udd70 **Cozy Place**: It must be welcoming, players must want to spend time inside the game, they must want to open the game to see what\'s going on.\\n- \ud83e\udd29 **Motivates Modders & Scripters**: It must encourage content creators to create and upload to the vault.\\n- \ud83d\udcf0 **News should be exciting**: Updates of vault items and even the game should be pleasant and exciting to read and to update.\\n- \ud83d\udd0d **Facilitated Discovery**: New game-modes and content should be found easily, as well as the best ones should be praised.\\n- \ud83c\udd95 **Expand the Possibilities**: The new menu should allow new horizons, it should be easy to integrate notification systems, lobby, favorites, etc.\\n\\n\\n### Home Screen\\n\\nIn the old Home we had friends, achievements and news divided into separate tabs:\\n\\n![](/img/blog/2022-june/old-ui-home.webp)\\n\\nBefore long we present the new **Home** page: a HUB where you can view a summary of your friends, your achievements, favorite servers, vault news and game updates!\\n\\n![](/img/blog/2022-june/new-ui-home.jpg)\\n\\n:::note\\n\\nSome buttons and features are not yet enabled and will be available soon\u2122. This initial version was aimed to contain all old features and some more \ud83d\ude09.\\n\\n:::\\n\\n\\n### Vault\\n\\nOur Vault was basically just for downloading/managing additional content, where it was possible to browse the store/remote and your local content and see a brief information about them:\\n\\n![](/img/blog/2022-june/old-ui-vault.webp)\\n\\n![](/img/blog/2022-june/old-ui-vault-details.webp)\\n\\nNow it has been redesigned for a completely new **User Experience**, providing filters and a new layout:\\n\\n![](/img/blog/2022-june/new-ui-vault.jpg)\\n\\nThe new vault navigation, in addition to continuing to provide quick install/update/uninstall buttons, now also provides a quick **Update All** button, which updates all outdated items installed at once. Not to mention the improved performance and the interconnection with other pages and systems!\\n\\n:::tip\\n\\nThis new version has several optimization improvements, such as disk images caching or virtualized list visualization \ud83d\ude01!\\n\\n:::\\n\\n\\n### Vault Details\\n\\nWe\'ve completely rethought the Vault concept and created a new details screen, which will open when a Vault (or New Game) item is opened:\\n\\n![](/img/blog/2022-june/new-ui-vault-item.jpg)\\n\\nThe purpose of this screen is to bring **all** possible information about the Package or Asset Pack: description, screenshots, updates, version, size, reviews, dependencies, and now the possibility of rating and soon\u2122 configuring them through the interface.\\n\\n![](/img/blog/2022-june/new-ui-vault-item-screenshots.jpg)\\n\\n![](/img/blog/2022-june/new-ui-vault-item-dependencies.jpg)\\n\\nYou can manage your review, the installation and updates on the right side!\\n\\nAnd when selecting a game-mode, a **Host New Game** button will appear in the lower right corner, this will be explained better below on this blog.\\n\\n\\n### New Game Screen\\n\\nOn the old New Game page, game-modes were separated into two different lists: *installed* and *local*, where it was possible to select one of the game-modes (or the \\"none\\" one) to start a server.\\n\\n![](/img/blog/2022-june/old-ui-new-game-game-mode.webp)\\n\\nIn the new design, the flow of `New Game -> Selecting game-mode -> Play` remains. But now we\'ve got a new interface and filters, also it is now possible to order by **popular**, **recently updated** or **top rating** game-modes, and it is possible to filter them by name or by the filter toggles.\\n\\nAlso, now this flow allows you to start a new game even without having the package installed, removing the need to browse and install from Vault before!\\n\\n![](/img/blog/2022-june/new-ui-new-game.jpg)\\n\\nWhen selecting a game-mode, the same detail page will appear (just like Vault). And by pressing **Host New Game**, a Server Setup popup will appear:\\n\\n![](/img/blog/2022-june/new-ui-new-game-setup.webp)\\n\\nWe created the concept of \\"single-player\\" game, which actually under-the-hood is the same server but configured to allow only one person and not announced at Server List.\\n\\nWe also improved the selection of additional Packages/Assets Packs, making the choice more functional and intuitive, you are now able to select multiple at a time before closing the selection popup.\\n\\nThe main idea of this new flow is to allow a new game to be created quickly, with less information required right away.\\n\\n:::note\\n\\nSoon\u2122 we have plans to integrate a new concept of \\"game-mode\\" config, which each game-mode can setup it\'s own configuration before starting!\\n\\n:::\\n\\n\\n### Find Servers\\n\\nFind Servers\'s old interface was quite simple:\\n\\n![](/img/blog/2022-june/old-ui-servers.webp)\\n\\nThe new version got some improvements aesthetically and now we got custom filters and improvement of the buttons display (they only appear when hovered):\\n\\n![](/img/blog/2022-june/new-ui-servers.jpg)\\n\\nAnd now it is possible to **favorite** \u2b50 a server!\\n\\n\\n### Ladebildschirm\\n\\nThe loading screen was not left out! We reformulated it so you can have a real notion of the loading progress. Now besides the background color lightening as loading is near the end, there are 4 bars in the lower left corner showing every step needed for the loading to finish!\\n\\n![](/img/blog/2022-june/new-ui-loading.jpg)\\n\\n:::note\\n\\nIt is planned to have a further improvement on the loading screen, as now when starting a New Game we still don\'t have \\"much\\" information on the server startup progress.\\n\\n:::\\n\\n\\n### Profile & Friends\\n\\nWe also got dedicated screens for your profile and to see your friends. In this screen you will be able to see information from someone or to follow him into a server.\\n\\n![](/img/blog/2022-june/new-ui-profile.jpg)\\n\\nBy clicking on your own profile, you will\u2122 have access to additional tabs like Achievements, Stats and soon Account Config as well!\\n\\n![](/img/blog/2022-june/new-ui-achievements.jpg)\\n\\n\\n## Conclusion\\n\\nAnd this was just the beginning! You know that our evolution always has been very organic, adopting and adapting suggestions and new ideas to make nanos world the best modern sandbox experience ever! And that\'s what matters most for us!\\n\\nIf you have ideas or suggestions for improvement for both Logos and UI, feel free to make them in our [Discord](https://discord.nanos.world), we will be all ears for you!\\n\\nAlso, if you have content uploaded to the [nanos world Store](https://store.nanos.world), please update it\'s description, screenshots and also your Team (now it supports image \ud83d\ude09) so it get prettier in-game!\\n\\nWe will push this blog updates to the game and all official pages as soon as possible in the next days, stay tuned!\\n\\nThank you for the support and dedication for this month! \ud83e\udd70"},{"id":"may-2022","metadata":{"permalink":"/de/blog/may-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-06-01-may.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-06-01-may.md","title":"2022 May: 666 Bugs Fixed & P2P!","description":"Bugs obliteration, P2P Servers, Better Sync & more!","date":"2022-06-01T00:00:00.000Z","formattedDate":"1. Juni 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":6.88,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"may-2022","title":"2022 May: 666 Bugs Fixed & P2P!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 June: Birthday, Rebrand & UI Redesign!","permalink":"/de/blog/june-2022"},"nextItem":{"title":"2022 April: Now on Unreal Engine 5!","permalink":"/de/blog/april-2022"}},"content":"**Bugs obliteration, P2P Servers, Better Sync & more!**\\n\\n\\n## Bugs shall not pass!\\n\\nIn this month, we proudly achieved the incredible mark of 666 issues closed (fixed and/or resolved) in our [Issue Tracker](https://github.com/nanos-world/issues/issues)!\\n\\n![](/img/blog/2022-may/666.png)\\n\\nYou may say it doesn\'t count because some of them were just duplicated, invalid or even were closed to move to the Feedback Hub, that\'s okay. But we are not even mentioning our internal issue tracker which we already had another 500+ issues closed: \ud83d\ude01\\n\\n![](/img/blog/2022-may/internal.jpg)\\n\\nOnly in May we got 60 reported bugs fixed:\\n\\n![](/img/blog/2022-may/60bugs.jpg)\\n\\nThis is a special indicator that demonstrates that all your suggestions and ideas are read and given due attention and ALL bugs are fixed! Thank you all for contributing to that, in special @Voltaism and @Ayanokoji which really do the tap monkey job and find the most unnoticeable bugs! \ud83d\ude02\\n\\n:::tip\\n\\nYou can find the endless list of all the bug fixes in our [Discord Changelog Channel](https://discord.gg/Wn6QRdUTFk):\\n\\n![](/img/blog/2022-may/changelog.jpg)\\n\\n:::\\n\\n\\n## New Feedback Page\\n\\nRecently, we\'ve launched a new feedback page to collect ideas & suggestions. Before we were doing it on the GitHub\'s Issue Tracker, but now we have a dedicated platform only for ideas and now the GitHub is not only for bugs.\\n\\n![](/img/blog/2022-may/canny.jpg)\\n\\nThis new platform is powered by Canny, where you can add a new suggestion and vote for others. Feel free to sign in and upvote the best ideas! It is extremely useful for us to know if a feature is something really required so we can give the right priority to that!\\n\\nIt also provides a roadmap tab which groups all accepted/planned and in-progress ideas! The old Trello board is not going to be used anymore.\\n\\n![](/img/blog/2022-may/roadmap.jpg)\\n\\n\\nCheck it out! \ud83d\udc49 https://feedback.nanos.world/\\n\\n\\n## P2P Servers\\n\\nSomething that is fundamentally important is the ability to start a game from menu to play with friends, without worrying about dedicated servers or forwarding router ports stuff.\\n\\nAnd now this is possible thanks to the new P2P servers option! This allows you to open a server in P2P mode, which relays all traffic through the Steam Relay Servers and establish a connection between the server and client with the security of none of those knowing each other IPs and so on! \ud83e\udd2f\\n\\nFor this to happen, we had to re-implement our file transfer system (when connecting to a server) which used an HTTP connection for this purpose, and now it can use the built-in connection system to to transfer them! (HTTP transfer is still faster than using the internal sockets, although on P2P connection this is the only possible approach).\\n\\n:::note\\n\\nTransferring files through HTTP is *still* faster than P2P. We\'re working to improve this performance as well!\\n\\nWhen a server is opened as P2P all transferring are redirected to use the built-in transfer system. In the other hand, opening a server as Dedicated Server will use as it is today: small files through the built-in transfer system and big files through HTTP.\\n\\n:::\\n\\nFinally, we are introducing two new \\"types\\" of servers: `Dedicated Server` and `P2P`, this is just a configuration you can set in the `Config.toml` or as a parameter `--dedicated_server 0/1` to enable it or not. Starting a server through the menu will start it as P2P by default unless explicitly set in the advanced tab.\\n\\nWhen starting a P2P server, the Steam Relay Server will generate a new temporary random \\"fake\\" IP address which will be used by others to connect to your server. Without the need to forward router ports!\\n\\nAs the connection is established through the Steam Relay Servers, even connecting to localhost all traffic will pass through the closest Steam Server of your computer, meaning even on localhost your ping will not be zero. If you want to test or play alone, we recommend start it as dedicated server.\\n\\n\\n## New Sync Interpolation\\n\\nSince UE 5.0, some interpolation started to get weird/flickering when syncing location/rotation with the clients. To fix and improve that, we managed to integrate all our network to the Unreal\'s build in Physics Replication system!\\n\\nThis system works by being fed by network snapshot packets and handling all interpolation, extrapolation, desyncs and high pings automatically! \ud83d\ude0e It greatly increased the quality of the physics sync!\\n\\nCurrently, all physics entities (Props, Weapons, Melee, Grenade and Vehicles) are simulated using this new system. Other entities (or non simulating physics) are still using the standard method of interpolation which is totally fine and suitable for that.\\n\\nWe are still looking to include Characters in the new system. As they use a separate movement system, it requires a different approach and special attention. \ud83d\ude09\\n\\n\\n## New In-game Console\\n\\nWe\'ve extended our in-game console to provide a new raw visualization. As Unreal Widgets don\'t provide a better approach to have both colored texts and the ability to select them, we\'ve decided to add a new tab which converts the console into raw text, which you can freely copy them to the clipboard:\\n\\n![](/img/blog/2022-may/console-colorful.jpg)\\n\\n![](/img/blog/2022-may/console-raw.jpg)\\n\\n*Also we added a button to open the log file directly!* \ud83d\ude09\\n\\n\\n## Noteworthy Changes\\n\\n### Network Debug Stats\\n\\nIn addition to the Network Debug drawings in the world, we\'ve included a new screen debug tool which shows network stats information in the screen, it will be displayed if you enable **Draw Network Debug** in the settings -> debug.\\n\\n![](/img/blog/2022-may/network-debug.jpg)\\n\\n\\n### Outline\\n\\nNow you can also enable an Outline effect in actors by [:SetOutlineEnabled()](https://docs.nanos.world/docs/next/scripting-reference/classes/base-classes/actor#setoutlineenabled) on it! It works like :SetHighlightEnabled, and you can customize it\'s color and thickness as well!\\n\\n![](/img/blog/2022-may/outline.jpg)\\n\\nWe\'ve already replaced the Sandbox Physics Gun effect with this too!\\n\\n\\n### Animation Settings\\n\\nWe started implementing a new interface for setting animations parameters on entities, it now supports a new parameter `play_rate` which you can define directly in the `:SetAnimation...()` of entities.\\n\\n![](/img/blog/2022-may/animations.jpg)\\n\\n:::note\\n\\nCurrently this new interface is only available to Weapons. Soon it will come to all entities!\\n\\n:::\\n\\n\\n### Sounds Settings\\n\\nThe same as Animation Settings, but for sounds as well! Now you can define per-entity-per-asset common sound settings on it, it supports `volume` and `pitch` parameters:\\n\\n![](/img/blog/2022-may/sounds.jpg)\\n\\n:::note\\n\\nCurrently this new interface is only available to Weapons. Soon it will come to all entities!\\n\\n:::\\n\\n\\n### Internal Control Rigs\\n\\nWith our efforts to modularize and remove some internal dependencies (mainly related to animations and animation blueprint), we started creating some Control Rigs to replace our old approaches of procedural animations (before they were hardcoded in the Animation Blueprint, and now they are split into several Control Rigs), which also provides better performance and modularization!\\n\\nWe already created and are using Control Rigs for **Driving** and **Aiming**, which provides procedural animations for aiming with weapons and for driving wheels.\\n\\n\\n### Sandbox Improvements\\n\\nThe sandbox game-mode got some improvements as well, such as new icons for the tools:\\n\\n![](/img/blog/2022-may/tools-icons.jpg)\\n\\nAs well improved PhysicsGun & Resizer linear scaling to have a better handling, a reworked system to attaching entities with the tools (before we were having wrong attach locations due the ping, now the client-side relative location is taken into account), and of course we\'ve got several bugs fixes!\\n\\nAlso we got a [PR](https://github.com/nanos-world/nanos-world-sandbox/pull/7) from Voltaism which added the option to respawn and freeze the time through the Context Menu.\\n\\n\\n## New Docs Tutorials\\n\\n### Custom Weapon Reload Animations\\n\\nWe\'ve created a new tutorial page for adding [Custom Weapon Reload Animations](https://docs.nanos.world/docs/next/assets-modding/creating-assets/animations/weapon-reload-animations). This was possible due our efforts to modularizing more and more the game. Reload animations are special because they trigger gameplay actions during it\'s execution, which needs to be configured inside the Animation Montage!\\n\\n\\n## Conclusion\\n\\nWith the achievement of implementing P2P servers, we managed to make immensely easier the ability to play and test with friends! Now everyone can start a server and play with friends immediately, without the need of port forwarding and so on! \ud83e\udd73\\n\\nAlso, with the introduction of the new [Roadmap & Suggestions](https://feedback.nanos.world), we are moving even more towards in the feedback-driven approach, so please put all your ideas in there, and vote for the ones you like! We **really** consider that to take the next steps!\\n\\nAh, it\'s worth mention we got a hit tweet \ud83d\ude01! If you don\'t follow us yet, please do that now!\\n\\n[![Foo](/img/blog/2022-may/trending.jpg)](https://twitter.com/nanos_world/status/1522868297129156608)\\n\\nThank you for more this month, you\'re loved! \ud83d\udc9d"},{"id":"april-2022","metadata":{"permalink":"/de/blog/april-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-05-04-april.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-05-04-april.md","title":"2022 April: Now on Unreal Engine 5!","description":"Unreal Engine 5 is now the official engine of nanos world!","date":"2022-05-04T00:00:00.000Z","formattedDate":"4. Mai 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":8.085,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"april-2022","title":"2022 April: Now on Unreal Engine 5!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 May: 666 Bugs Fixed & P2P!","permalink":"/de/blog/may-2022"},"nextItem":{"title":"2022 March: Steam, Database & Blueprints!","permalink":"/de/blog/march-2022"}},"content":"**Unreal Engine 5 is now the official engine of nanos world!**\\n\\n\\n## Unreal Engine 5\\n\\n![](/img/blog/2022-april/ue5.jpg)\\n\\n#### We are thrilled to announce that Unreal Engine 5 is now the default engine of nanos world!!!\\n\\nIt was an intense month of updates, improvements and bug fixes for reaching a reasonable stable version of nanos world. We are very thankful to the testers who helped to test the stability, the migration of assets and finding bugs on it!\\n\\nIt\'s worth mention that even that UE5 \\"stable\\" was released officially by epic, there are still some bugs and improvements that need to be done, in the end of this blog we will list all known bugs we already found on UE5 and are waiting for an official fix.\\n\\nWith this release we are aiming to have the same experience and stability as before on nanos world. We are going to introduce more and more Unreal Engine 5 features in the upcoming updates from now on, granting they will have the proper stability and integration.\\n\\n\\n## Amazing new UE5 Features\\n\\nHere\'s some noteworthy new Unreal Engine 5 features which will be very useful for nanos world Asset creators!\\n\\n\\n### [New UI](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/505-new-unreal-editor-interface)\\n\\n![](/img/blog/2022-april/ue5-ui.jpg)\\n\\n*Unreal Engine 5 brings a suite of improvements to the look, feel, and efficiency of the user interface, creating a modern, improved workflow for all users.*\\n\\nIt\'s a way better and pleasant workflow for modders and asset creators!\\n\\n\\n### [Geometry Tools](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/500-core-modeling-improvements-beta)\\n\\n![](/img/blog/2022-april/ue5-modeling.jpg)\\n\\nCreating meshes and maps got even easier with the built-in modeling and mesh editing tools inside UE5!\\n\\n\\n### [Quixel Bridge](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/372-quixel-bridge)\\n\\n![](/img/blog/2022-april/ue5-quixel.jpg)\\n\\n*The Quixel Bridge plugin for Unreal Engine gives you full-featured access to the Megascans library within the Unreal Editor. You can browse Collections, search for specific assets, and easily add assets to your Unreal Engine projects.*\\n\\nIt comes built-in with UE5! Just drag\'n drop and you have the asset!\\n\\n:::tip\\n\\nWe are actively looking for a way to improve the Quixel Bridge pipeline into nanos world.\\n\\n:::\\n\\n\\n### [Chaos Destruction](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/379-chaos-destruction)\\n\\n![](/img/blog/2022-april/ue5-chaos.jpg)\\n\\n*The Chaos Destruction system is a collection of tools that can be used to achieve cinematic-quality levels of destruction in real time.*\\n\\nWe\'ve managed to already integrate an initial version of it with nanos world, you can spawn any **Geometry Collection** as a StaticMesh, check it out!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-april/chaos-destruction-01.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-april/chaos-destruction-02.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-april/chaos-destruction-03.webm\\" />\\n</video>\\n\\n:::tip\\n\\nWe are actively working on improving even more the integration with Chaos Destruction entities!\\n\\n:::\\n\\n\\n### [Lumen](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/513-lumen)\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-april/ue5-lumen.webm\\" />\\n</video>\\n\\n*Lumen is Unreal Engine 5\'s new fully dynamic global illumination and reflections system.*\\n\\nIt provides a software-calculated Ray Tracing methods! This is a new very efficient technique for achieving Global Illumination, but it still has a cost. In our tests Lumen in Epic quality hit 50% of the FPS, and 25% on Medium. You can enable/disable it in the Game Settings.\\n\\nLumen also provides a **Hardware Ray Tracing** method for compatible GPUs, this is also now a setting in the Game Settings ;)\\n\\n\\n### [DirectX 12](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/526-directx-12)\\n\\n![](/img/blog/2022-april/ue5-dx12.jpg)\\n\\nNow nanos world comes with DX12 as the default RHI. *Some new features such as Nanite, Lumen, and Virtual Shadow Maps run more efficiently in DX12 than in DX11.*\\n\\nYou can switch from DX11 <-> DX12 in the Game Settings. *DX12 is required to use Hardware Ray Tracing.\\n\\n\\n### Much More\\n\\nYou can see a list of all the new features in the [Official UE5 Roadmap](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/tabs/46-unreal-engine-5-0) and also in the [Official UE5 Release Notes](https://docs.unrealengine.com/5.0/en-US/unreal-engine-5-0-release-notes/).\\n\\nIt\'s worth mentioning other amazing features like [MetaHumans](https://www.unrealengine.com/en-US/metahuman-creator), [Nanite](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/511-nanite) and [Runtime Retargeting](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/374-retargeting-full-body-ik-toolset). Those (and many others) are still going to be tested to be actively supported on nanos world!\\n\\n\\n## Reworked Water Physics\\n\\nAlso this month we managed to tweak a little bit our Water Physics settings. We use Unreal\'s Water System integrated into nanos world, and it uses a Pontoon system to make buoyancy on the objects. Props, Pickables and Vehicles have the pontoons spawned automatically in game, and since then the algorithm to calculate the size and it\'s force was quite primitive.\\n\\nAfter several hours testing and doing several extremely hard math calculations we\'ve managed to implement a new procedural algorithm which dynamically spawns pontoons through the object depending on it\'s size and mass. This makes rectangular objects to react properly for example (before we had only one sphere pontoon which made objects to keep rotating weirdly in water).\\n\\nThis new algorithm fixes the problem of having some Props being ejected and kicking infinitely over the water, and also normalizes their floating capabilities. Right now they all floats equally, we still intend to improve it by allowing custom pontoons to be set through scripting and also through the engine, and also to use Physical Materials to change the buoyancy force depending on it.\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-april/water-buoyancy.webm\\" />\\n</video>\\n\\n## New Default Maps\\n\\n![](/img/blog/2022-april/ocean-map.jpg)\\n\\nWe are shipping two new default maps to nanos world: `OceanMap` and `BlankMap`. The first contains a small island and a vast ocean (good for testing Water stuff), and the second is literally Empty and all black, good for dynamic scripting created maps!\\n\\nWe\'ve also tweaked the size of `BlankMap` and it\'s surface texture to have a modern and UE5 look.\\n\\n\\n## nanos world Migration\\n\\nAs we stated in the last [blog](https://docs.nanos.world/blog/march-2022#steam-store-page) we are moving to a new Store Page, the new nanos world version on UE5 will already be on this new game entry, and the old entry will be completely deactivated.\\n\\n\\n### Game\\n\\nAll the **current testers** will receive a new Steam Key to activate nanos world in your Steam accounts. Here\'s how to get the new nanos world game key:\\n\\n1. **WISHLIST** the new game entry first \ud83d\ude01\\n\\n<iframe class=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameborder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n2. ***optional***: Launch the old game at least once to store your achievements to automatically import them when launching the new game (*this is a built-in tool to automatically export and import your stats*).\\n3. ***optional***: Make a backup of your `Server/` folder (*if you are developing Packages/Assets*).\\n4. ***optional***: Uninstall the old game, although it is not obligatory, it\'s recommended because some problems may happen if you don\'t, as both games use the same folder name.\\n5. You will receive the new Steam Key at the [Auth Website](https://auth.nanos.io/identity/account/manage/redeemcode/). If you didn\'t, please reach us.\\n\\n\\n:::caution\\n\\nAll old game keys will be revoked. You will receive an warning on Steam saying that the \\"Beta Test has ended\\".\\n\\n:::\\n\\n\\n### Assets\\n\\nThe pipeline of exporting assets from Unreal Engine didn\'t change, all old tutorials are still valid but some are still using the old UE4 interface, we are constantly updating the docs to update the images and add more information to this workflow.\\n\\nWe\'ve already updated the [Importing Custom Assets](https://docs.nanos.world/docs/next/assets-modding/creating-assets/importing-assets) and also the [Assets Development Kit](https://docs.nanos.world/docs/next/assets-modding/creating-assets/adk-assets-development-kit) pages. There is a new workflow which has been updated to export assets, so now you don\'t need to package the project, just need to cook the assets - but the old way is still valid tho, the new is just easier.\\n\\nThe [Assets Development Kit GitHub Project](https://github.com/nanos-world/assets-development-kit) was updated as well, the only things that changed were the following files:\\n\\n* `Config/DefaultEngine.ini`\\n* `NanosWorldADK.uproject`\\n\\nYou can pull into your current ADK downloaded project or just replace your project with the new files. If you get problems, try deleting the following folders in your project, so you have a clean project (without the old compiled stuff):\\n\\n* `Binaries/`\\n* `Saved/`\\n* `Intermediate/`\\n\\n:::note\\n\\nAll Assets will need to be recooked in Unreal Engine 5 to work with the new nanos world version. This is needed as from time to time the shader code or the serialized binaries are changed when the Engine changes, so we need to get in the same version otherwise the game may crash expecting to load a newer version but the file is old.\\n\\nWe already managed to update the official asset packs.\\n\\n:::\\n\\n\\n### New Testers\\n\\nWe are very sorry for making the recently players which registered to become a tester to wait that long, since we are moving to the new game entry, we didn\'t want to give you the old keys anymore, but now we are backing to our testing invitations!\\n\\n:::tip\\n\\nWe are still aiming to invite only Modders and Scripters, if you are just a player, keep the eye on the future open Playtest sessions!\\n\\n:::\\n\\n\\n### Known Bugs\\n\\nSome bugs are known and are listed below, most of them we don\'t have much to do and are much likely an internal UE5 bug, I am reporting them all to Epic, let\'s pray they accept the report and fix it.\\n\\n- Cables rendering not working sometimes (Epic accepted [my report](https://issues.unrealengine.com/issue/UE-149249)).\\n- Balloons/Cables square constraint (Epic accepted [my report](https://issues.unrealengine.com/issue/UE-148444) and already fixed it for 5.1).\\n- Hit events/sounds not always triggering (report not accepted yet).\\n- SceneCapture not bounces anymore (report not accepted yet).\\n- Chaos Physics sometimes freeze an object if he stands still for some small time, I did some workaround to fix it in certain cases on nanos world (when grabbing or dropping props).\\n\\n\\n## Conclusion\\n\\nThis release of nanos world on UE5 represents our efforts to always bring the bleeding edge technology to the game. It is our main pillar to develop a platform with quality, efficiency and modularity. And by doing it right, these updates and new features become easy to integrate or make \ud83d\ude01.\\n\\nWe want to be the reference in sandbox games for the Unreal Engine (5), and we are moving in that direction!\\n\\nWe really appreciate everyone who has supported us so far! Every like, react, emoji or comment makes us much happier! Thank you!"},{"id":"march-2022","metadata":{"permalink":"/de/blog/march-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-04-06-march.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-04-06-march.md","title":"2022 March: Steam, Database & Blueprints!","description":"New Steam Store Page, Performance Optimization, Databases & Blueprint Integration!","date":"2022-04-06T00:00:00.000Z","formattedDate":"6. April 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":8.155,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"march-2022","title":"2022 March: Steam, Database & Blueprints!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 April: Now on Unreal Engine 5!","permalink":"/de/blog/april-2022"},"nextItem":{"title":"2022 February: UE5 & Network Authority!","permalink":"/de/blog/february-2022"}},"content":"**New Steam Store Page, Performance Optimization, Databases & Blueprint Integration!**\\n\\n## Steam Store Page\\n\\nRecently we got a hitch in our Store Page which required us from getting a brand new one. And now we finally are re-releasing it! It got new screenshots, videos and a better description!\\n\\n[![](/img/blog/2022-march/store-page.jpg)](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=march_blog)\\n\\n#### Please WISHLIST NOW!!!\\n\\n<iframe class=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameborder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\nA downside of this whole situation is that the old store and the old game entry will be deactivated. Soonish everyone will receive a new Steam Key to activate the new nanos world in your library!\\n\\nAlso we embedded a tool to export (then import) your Achievements and Stats from the old game to the new one. You just need to launch the old game once before launching the new one and everything is imported automatically!\\n\\n\\n## Performance Optimization\\n\\nEveryone knows that one of the great aspects of nanos world is the performance and the optimization. And in the last month we had a significant advance in improving some internal critical points of our framework.\\n\\n\\n### Memory\\n\\nThe first one to mention was a **huge** improvement in the memory usage of our spawned entities.\\n\\nInternally, we use a special system to handle sending and syncing data through the network. Our approach is to have a similar system to Unreal\'s Replication system. But until then this system was responsible for most of part of the memory usage in each spawned Entity.\\n\\nWith that in mind we aimed to solve this problem, not to mention most of these memory usage was duplicated in all entities unnecessarily. And fortunately we succeeded on reducing up to 90% of the memory usage of the entities. Right now it occupies exactly the data which is strictly needed for it\'s existence!\\n\\nWe did a small test to compare, spawning 10.000 Characters through Scripting, check the memory usage difference:\\n\\nBefore: ![](/img/blog/2022-march/memory-before.png)\\n\\nAfter: ![](/img/blog/2022-march/memory-after.png)\\n\\nComparison of some Entities Memory Usage Before x After:\\n\\n| Entity     | Memory Usage Before | Memory Usage After | Reduction |\\n|:---------- |:------------------- |:------------------ |:--------- |\\n| Cable      | 5.4 KB              | 1.1 KB             | 80%       |\\n| Character  | 13.1 KB             | 1.8 KB             | **86%**   |\\n| Light      | 4.8 KB              | 1.0 KB             | 79%       |\\n| Melee      | 7.1 KB              | 1.5 KB             | 79%       |\\n| Particle   | 4.6 KB              | 1.0 KB             | 78%       |\\n| Player     | 3.1 KB              | 0.3 KB             | **90%**   |\\n| Prop       | 4.8 KB              | 1.0 KB             | 79%       |\\n| StaticMesh | 4.5 KB              | 1.0 KB             | 78%       |\\n| TextRender | 5.3 KB              | 1.1 KB             | 79%       |\\n| Trigger    | 4.0 KB              | 0.8 KB             | 80%       |\\n| Vehicle    | 7.9 KB              | 2.0 KB             | 75%       |\\n| Weapon     | 11.1 KB             | 2.0 KB             | **82%**   |\\n\\n:::note\\n\\nThis usage was calculated on Server side. On Client side the values would be a little bit bigger, not to mention to the Assets which are loaded together.\\n\\n:::\\n\\nThis was achieved just by improving one single system, we didn\'t even start looking for active compression techniques or reducing some variables sizes which are unnecessarily bigger than it needs. \ud83d\ude4f\\n\\n\\n### Network\\n\\nAnother great optimization was in our network packets, each data sent through the network has a common \\"header\\" to identify some operations. This is a constant \\"cost\\" for the network which we managed to reduce up to 75% of it\'s size, making all data being sent through the network statically lower!\\n\\n\\n### Client Side\\n\\nWe started advancing into optimizing the game in the client side. Which normally is trickier than on Server side because it concerns to dealing to Unreal Engine subsystems. But we managed to add some optimizations based on the Quality Settings selected. For example on the Blood or Bullet Holes particles, now depending on the distance and on the Effects Quality selected, they will be less or not spawned at all.\\n\\nWe\'ve also tweaked the Vehicle System to do similar optimizations using this system. There is still a lot which we can improve! \ud83d\ude00\\n\\n\\n## New Class: [Blueprint](https://docs.nanos.world/docs/next/scripting-reference/classes/blueprint)\\n\\n![](/img/docs/blueprint.webp)\\n\\nA very required class is being introduced: **Blueprint**! Now it is possible to spawn any Blueprint Actor in nanos world!\\n\\nWe\'ve managed to implement the method: `CallBlueprintEvent()` which you can create any **Event** or **Function** with any number of parameters in your Blueprint and call it from Scripting! This expands many possibilities!\\n\\nAlso, you can spawn it on server and it will follow the same rules as any other Actor Entity, and it will be synchronized with other players using the Network Authority system as well!\\n\\n\\n## New Class: [Database](https://docs.nanos.world/docs/next/scripting-reference/classes/database)\\n\\n![](/img/docs/db.webp)\\n\\nSomething that is extremely fundamental for some game-modes such as roleplay is the Database. Until then we were providing a MySQL Module to be used as a third-party Lua library, but due it\'s complexity to integrate with your server and also because it wasn\'t possible to make async queries we dug into a more robust solution.\\n\\nFor that, we present the new class: [Database](https://docs.nanos.world/docs/next/scripting-reference/classes/database). A all-in-one solution for connecting to a database, it supports **MySQL**, **PostgreSQL** and **SQLite** out of the box! Not to mention the async and thread-safe queries!\\n\\nCheck it\'s page for complete documentation and examples!\\n\\n\\n## Vehicles Tire Skid Mark\\n\\nA small but cool addition we did for vehicles was adding Tire marks when it skids:\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-march/tire-skid.webm\\" />\\n</video>\\n\\nAlso, an awesome detail was added: the wheels get smeared with blood!\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-march/tire-blood.webm\\" />\\n</video>\\n\\nIt is 100% dynamic and procedural!\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-march/tire-blood-decal.webm\\" />\\n</video>\\n\\n## Sandbox Improvements\\n\\nWe got several improvements regarding the sandbox game-mode! The first one is the sandbox \\"API\\": we listed all functions and events it exports so you can integrate your own entities/tools or use it\'s features.\\n\\nAlso we\'ve modularized the menu, categories and tabs, and you can add your own from your external package!\\n\\nCheck it out the sandbox API in the GitHub page: https://github.com/nanos-world/nanos-world-sandbox.\\n\\nFinally, we\'ve improved our Physics Gun tool, now you can control it using the mouse and also have a \'snap-to-grid\' movement!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-march/physics-gun.webm\\" />\\n</video>\\n\\nSeveral other adjustments and bug fixes were made on Sandbox as well.\\n\\n\\n## New [Particle Methods](https://docs.nanos.world/docs/next/scripting-reference/classes/particle)\\n\\nWe\'ve expanded the possibilities for Particles! Now it\'s possible to set Material parameters on it, and also use any **Texture**, **WebUI** and **Canvas** as parameters as well!\\n\\nFor example you can spawn a Canvas, draw on it and use as a Material Particle parameter!\\n\\nThe following video shows using the WebUI https://nanos.world as a Material parameter into the Particle! Rendering in runtime!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/2022-march/particles-webui.webm\\" />\\n</video>\\n\\n## Notable Improvements\\n\\n### Music Concurrency\\n\\nWe finally managed to fix the Music problem, which was making Sounds of type Music from stopping when too many sounds were spawned.\\n\\n\\n### Client-side [Props](https://docs.nanos.world/docs/next/scripting-reference/classes/prop)\\n\\nProps can now be spawned on Client side as well! This allows having \\"unnetworked\\" dynamic meshes spawned on client, intended for use as visual effects and non-gameplay features.\\n\\nWe\'ve already updated the Sandbox\'s Destructable entities to use client-side debris!\\n\\n\\n### Level Static Meshes\\n\\n![](/img/blog/2022-march/been.jpg)\\n\\nNow all [StaticMeshActors](https://docs.unrealengine.com/4.27/en-US/Basics/Actors/StaticMeshActor/) from a Map are automatically loaded as [StaticMesh](https://docs.nanos.world/docs/next/scripting-reference/classes/static-mesh) entity on Client Side! It is possible to paint, destroy, move and everything else on them on client-side!\\n\\n\\n### Async Texture Loading\\n\\nWe\'ve improved our Client loading system and now textures (e.g. `.jpg`) are asynchronously loaded and the texture is applied in a deferred way. This system currently is implemented under `SetMaterialTextureParameter()` for testing, soon we can use it in other methods as well.\\n\\n\\n### Async [File](https://docs.nanos.world/docs/next/scripting-reference/classes/file) Loading\\n\\nIn addition to the above, we\'ve expanded our Async implementation into File class, which now have the `:ReadAsync()` method!\\n\\n\\n### New [Light](https://docs.nanos.world/docs/next/scripting-reference/classes/light) Methods\\n\\nWe\'ve added a bunch of missing Light setters and getters methods, also the ability to toggle it on/off with `SetVisibility()`.\\n\\n\\n### [Assets.toml](https://docs.nanos.world/docs/next/core-concepts/assets#assets-pack-configuration) Changes\\n\\nThe Asset.toml got a new category: `unreal`, where we must specify a new setting `unreal_version` (the unreal version this Asset Pack was compiled on), this will be an important feature to prevent old Assets versions from crashing the game.\\n\\nAlso it got the new `blueprints` category for listing Blueprints \ud83d\ude09.\\n\\n\\n### Vehicle Collisions\\n\\nWe\'ve tweaked and improved our Collision configurations and now Vehicles interact better when colliding with other objects, including Networked Characters, Props and other Vehicles.\\n\\nBefore other Networked Characters were desyncing when colliding with vehicles (they started to fly and weird things happened when objects hit the Vehicles wheels), and also the hit between two vehicles were extremely rigid, which has been fixed too and will be more organic now.\\n\\n\\n### Sun Improvements\\n\\n![](/img/blog/2022-march/sunrise.jpg)\\n\\nThe Default Sun light and shadows has been improved, specially during sunrise/sunset which we had some artifacts and shadows disappearing, now it must be smoother and prettier (and hopefully more efficient).\\n\\n\\n## Conclusion\\n\\nThank you for another month of support! There were incredible advances with Blueprint and Database Classes, and also to finally lining up our Steam Page again!\\n\\nOur north is to continue advancing performance and memory optimizations, as well as bringing essential new features to nanos world!\\n\\nWe also have some important challenges of bringing distance based culling and dimensions system for entities, which is essential for creating special environments.\\n\\nThere are some essential Classes that we want to implement as well, like custom Characters (e.g. for Animals) and other types of Vehicles (Air, Sea).\\n\\nFinally, we are very excited with the release of Unreal Engine 5 (yesterday 05 April), as with it comes with several solutions to important questions in nanos world (such as Runtime Retargetting which promises solving several animations compatibility issues) and tons of new features to be used! We gonna have good news soon\u2122 for you!\\n\\nSee you next month! \ud83e\udd73"},{"id":"february-2022","metadata":{"permalink":"/de/blog/february-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-03-02-february.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-03-02-february.md","title":"2022 February: UE5 & Network Authority!","description":"Unreal Engine 5 Preview, new Network Authority System, Store API and more","date":"2022-03-02T00:00:00.000Z","formattedDate":"2. M\xe4rz 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":8.105,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"february-2022","title":"2022 February: UE5 & Network Authority!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 March: Steam, Database & Blueprints!","permalink":"/de/blog/march-2022"},"nextItem":{"title":"2022 January: Store & Vault!","permalink":"/de/blog/january-2022"}},"content":"**Unreal Engine 5 Preview, new Network Authority System, Store API and more**\\n\\n\\n## Network Authority System\\n\\nAs everyone knows, nanos world relies on a \\"server-less\\" solution for physics and other world operations. All the sync relies of sharing data between the players and replicating in each client. This approach brings several advantages and of course some drawbacks, in the advantages we can include a very lightweight server, where we have all the control over it, without needing to rely on Unreal\'s server executable or the way it handles the network.\\n\\nIn the other hand we got some challenges on how to distribute physics information and other stuff. Then in the beginning we created our first Network Authority system in which each player is responsible for sharing a specific set of entities from the server to others, similar to [Roblox Solution](https://developer.roblox.com/en-us/articles/Network-Ownership).\\n\\nHowever, just like in Roblox, some problems become more noticeable when we have many players connected with many different pings. As some players will receive the \\"network authority\\" over entities faster than others, they will start sharing their location/rotation to other players while the \'old\' network authority is still the authority over that because he didn\'t receive the \\"lost network authority\\" message yet.\\n\\nWe created this diagram to exemplify the problem:\\n\\n![](/img/blog/february/network-authority-problem.jpg)\\n\\nAs you could notice, there is a \\"gap\\" and a \\"overlap\\" when switching network authority if we have discrepancies between players ping, causing several weird behaviors on physics objects.\\n\\nConsidering this and after much study, we improved our Network Authority system to make it more robust, this new way aims to fill up the gaps and ignore overlaps:\\n\\n![](/img/blog/february/network-authority-solution.jpg)\\n\\n\\nWhile still in a \\"beta\\" version, with this new system we intend to improve all the \\"warnings\\" and flickering problems that were occurring since then, all feedback is appreciated!\\n\\n\\n## New Debug Modes\\n\\nWith the addition of the new Network Authority system, we are adding a new **Debug** section in the Settings.\\n\\n![](/img/blog/february/debug-settings.jpg)\\n\\nA cool setting is the **Draw Network Debug** which draws on World all network information:\\n\\n![](/img/docs/debug-visualizer.jpg)\\n\\nYou can find more information in the [Network Authority](https://docs.nanos.world/docs/next/core-concepts/scripting/authority-concepts#debugging-network--network-authority) page.\\n\\nAlso you can fake \\"packet loss\\" which will simulate some Sync Data being discarded.\\n\\n\\n## Store API\\n\\n![](/img/blog/february/swagger.png)\\n\\nLast month we released our [Store](https://store.nanos.world), a place to share and download community Assets & Packages, integrated with the game.\\n\\nNow we are releasing the **Store API**: You can download, upload and edit your resources through HTTP requests, check it the Swagger documentation at https://api.nanos.world/store/docs. More tutorials coming soon\u2122.\\n\\n\\n## Documentation Changes\\n\\n### Module\\n\\nWe\'ve added a new tutorial for creating your own C Module. You can check it out at the [Modules](https://docs.nanos.world/docs/next/core-concepts/modules#creating-your-own-c-module) page.\\n\\n\\n## Unreal Engine 5: Preview\\n\\n![](/img/blog/february/matrix.webp)\\n\\nA week ago, Epic Games gave us the wonderful news that they were releasing [Unreal Engine 5: Preview](https://www.unrealengine.com/en-US/blog/unreal-engine-5-is-now-available-in-preview). A Preview release means most of the features are already present and almost ready for a final shipping version.\\n\\nAnd we, as good enthusiasts, and in addition to our other blog news ([November: Unreal Engine 5?](https://nanos.world/blog/november-2021)) decided to give another try on converting nanos world into Unreal Engine 5. And let\'s move to our impressions:\\n\\n\\n### Migrating nanos world\\n\\nThis time migrating nanos world to Unreal Engine 5: Preview was more trickier, we\'ve got even more deprecated methods and some functionalities changed and/or removed, which required more hard work converting and debugging what has changed.\\n\\nWe\'ve had to update a lot more code and files than the Early Access version to be able just to launch the Project. Also Vehicles had to be disabled due the new Chaos engine, which completely changes how Vehicles need to be implemented and we didn\'t want to bother on converting them right now.\\n\\n\\n### Graphics\\n\\nUnreal Engine 5 introduces [Lumen](https://www.unrealengine.com/en-US/blog/lumen-in-ue5-let-there-be-light), a new dynamic Global Illumination method, and playing with it is very cool and impressive. Here\'s some screenshots taken from our Testing Map:\\n\\n\\n![](/img/blog/february/ue5-graphics-01.jpg)\\n\\n![](/img/blog/february/ue5-graphics-02.jpg)\\n\\n![](/img/blog/february/ue5-graphics-03.jpg)\\n\\n![](/img/blog/february/ue5-graphics-08.jpg)\\n\\n![](/img/blog/february/ue5-graphics-09.jpg)\\n\\n![](/img/blog/february/ue5-graphics-10.jpg)\\n\\n:::tip\\n\\nNext you can see how the object colors can reflect dynamically in the environment lights.\\n\\n:::\\n\\n![](/img/blog/february/ue5-graphics-04.jpg)\\n\\n![](/img/blog/february/ue5-graphics-05.jpg)\\n\\n![](/img/blog/february/ue5-graphics-06.jpg)\\n\\n![](/img/blog/february/ue5-graphics-07.jpg)\\n\\n:::tip\\n\\nHere we can see the contribution of Emissive Materials to the environment.\\n\\n:::\\n\\n![](/img/blog/february/ue5-graphics-11.jpg)\\n\\nA cool feature is that we can enable Hardware-Accelerated for calculating Lumen (which replaces Hardware Ray Tracing), and tested with a RTX 3070 makes it even more beauty at a really low GPU cost.\\n\\n\\n### Technical\\n\\nIn the technical aspect, the biggest changes Unreal 5 brings are:\\n\\n- **Lumen** (Dynamic Global Illumination)\\n- **Nanite** (Mesh Virtualization)\\n- **Chaos** (new Physics Engine)\\n- and also not less important, the new features regarding World/Level creation (**One File Per Actor** and **World Partition**)\\n\\nWhile Lumen, Nanite and World features can be toggled on or off (we can choose to use it or not), the same truth is not valid for **Chaos**. Unreal is completely removing PhysX and replacing by it\'s new Physics Engine: **Chaos**. Although we are open to new things, unfortunately Chaos doesn\'t seem to be in a totally good state, neither at least at the same level/stability as PhysX.\\n\\nWe could experience several Collision glitches, such as objects flickering, wrong \\"collision boxes\\", objects flying through walls, bugs with Rope (Cable), objects sleeping randomly, bad Hit events callbacks and so on.\\n\\nMost of the problems we could find an workaround (like applying force to some objects so they don\'t sleep, or finding a workaround on the Cables settings), but the main problem we\'ve found using Chaos is the Hit feedback event, which are totally inconsistent, sometimes they are triggered with force 0, which annoys the hit sounds and also the nanos world Hit events from being triggered, and this can break gameplay/scripting functionalities.\\n\\nNot to mention the objects flickering/disappearing/losing collisions which gives a really bad impression on the game quality.\\n\\nAnd we didn\'t even started implementing the new Chaos Vehicles, can\'t wait what we gonna find there \ud83d\ude05.\\n\\n\\n### Stability\\n\\nActually, this version of Unreal surprised us positively, it had less crashes than in early access, but still had some, but in this case it was when we were stressing the game really hard using several balloons, cables and props flying around. Although I was a little disappointed as most of the bugs I found in the Early Access were still prevent in this Preview and weren\'t yet fixed.\\n\\nAlso some rare bugs could be noticed, like suddenly being teleported to the 0, 0, 0 location, which we couldn\'t yet find the reason.\\n\\n\\n### UE5 worth it now?\\n\\nSumming up, we\'ve created a list of positive and negative points according to our view regarding if we should or not migrate to Unreal 5 \\"right now\\":\\n\\nAlso, another point to consider: we are going to migrate to Unreal Engine 5 soon or later, the decision is \\"when\\". \ud83d\ude09\\n\\n\\n#### Negative Points \ud83d\udc4e\\n\\n- Gameplay Bugs related to Physics, objects jumping, flickering, bad collisions happening, objects passing through floor/walls due **Chaos**.\\n- Visual Artifacts, not only related to Lumen, but to the standard Rendering methods as well.\\n- Random Unreal internal Crashes, which we cannot fix by ourselves.\\n- More frequent Unreal updates, much probably we are going to have other Preview version, and after the UE5 release we are going to get several hotfixes, and each one will much likely require us from rebuilding all assets and publishing a new version of them, otherwise they won\'t work in the new versions. This means the Asset Packs won\'t work in newer Unreal versions.\\n- Using Lumen has it\'s drawbacks, such as the performance, which can hit from 25% to 50% of the FPS (but can be toggled on/off).\\n\\n\\n#### Positive Points \ud83d\udc4d\\n\\n- We are going to be the first ones to explore Unreal Engine 5 (which can be bad because some problems no one figured out yet, but personally I love exploring new features and using new tools).\\n- nanos world will have a great self-marketing potential, and also can bring lots of new enthusiasts on UE5 to know, play and create with the game.\\n- Lumen is fun and beautiful.\\n- New World/Level tools which allows creating big maps and also improves a lot the co-creations pipelines using the **One File Per Actor** system and **World Partition**!\\n- New Unreal Editor which has a fresh and pleasing look.\\n- Lots of new tools and technology to use, including Nanite, Chaos Destruction, Animation tools (which can help us from dynamically linking your custom Animation Blueprint) and the new MetaSounds.\\n- It\'s really hard to convert nanos world from scratch every update to test it\'s stability, I can\'t reuse the previous conversion because many changes are in blueprints (UI) that I can\'t merge and lots had changed since then. So converting once and right now we can already start digging, fixing stuff and the next unreal updates will be easier and faster to test and maintain.\\n\\n\\nUnlike Early Access, this version seemed to have more positives than negatives points, and it seems like a better opportunity than before to officially migrate nanos world. Come to our [Discord](https://discord.nanos.world) to discuss this idea with us! We are going to make a poll to bring all feedback from the community!\\n\\n\\n## Community Spotlight\\n\\nHere we\'d like to share all amazing stuff our community is doing the last weeks!\\n\\n\\nTimmy is doing an amazing job, and is sharing it\'s new Inventory System:\\n\\n![](/img/blog/february/timmy-inventory.jpg)\\n\\nAlso Timmy created a nice smooth Weather system transition:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/february/timmy-weather-01.webm\\" />\\n</video>\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/february/timmy-weather-02.webm\\" />\\n</video>\\n\\nMegaThorx released it\'s brand new [EGUI](https://store.nanos.world/packages/egui/) library. A Package for creating GUIs from scripting! It also contains it\'s own complete [documentation](https://nanos-world.github.io/egui-docs/)!\\n\\n![](/img/blog/february/megathorx-egui.jpg)\\n\\n\\nVoltaism shared a very cool implementation of Bots playing his game-mode VZombies by themselves with no Players:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/february/voltaism-bots.mp4\\" />\\n</video>"},{"id":"january-2022","metadata":{"permalink":"/de/blog/january-2022","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2022-02-09-january.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2022-02-09-january.md","title":"2022 January: Store & Vault!","description":"Introducing Store, New Classes and all Retroactive Updates!","date":"2022-02-09T00:00:00.000Z","formattedDate":"9. Februar 2022","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":9.07,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"january-2022","title":"2022 January: Store & Vault!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 February: UE5 & Network Authority!","permalink":"/de/blog/february-2022"},"nextItem":{"title":"2021 November: Unreal Engine 5?","permalink":"/de/blog/november-2021"}},"content":"**Introducing Store, New Classes and all Retroactive Updates!**\\n\\nThis blog will also summary up the highlights of everything that has been developed since the last blog in November! Detailed Changelog is available in our [Discord](https://discord.nanos.world)! Stay tuned!\\n\\n\\n## Introducing: Store & Vault!\\n\\n![](/img/blog/january/store-01.jpg)\\n\\nIt is with great joy that we finally announce the long-awaited **Store**! The Store is a marketplace where everyone will be able to upload their Assets, Packages, release new versions, create Teams and much more! 100% integrated with the Vault and the CLI!\\n\\n:::tip\\n\\nThe store development is being headed by **@MegaThorx**! This is the initial version and several updates will come! All feedback is appreciated!\\n\\n:::\\n\\n\\n### Features Highlights\\n\\n* Creation of **Asset Packs** & **Packages** pages, including images and description.\\n\\n![](/img/blog/january/store-03.jpg)\\n\\n* Upload of new **Versions**, with ability to tag as Draft, Beta and Stable.\\n\\n![](/img/blog/january/store-02.jpg)\\n\\n* Create a **Team** and add Team members.\\n\\n![](/img/blog/january/store-05.jpg)\\n\\n* **Tag & Category** system.\\n\\n![](/img/blog/january/store-04.jpg)\\n\\n:::tip\\n\\nCheck out the complete documentation [here](/docs/next/vault-and-store/store).\\n\\n:::\\n\\n**nanos world Store available now on https://store.nanos.world/**\\n\\n\\n### Server Token\\n\\nWith the addition of the Store, we\'ve got a new feature: **Server Token**.\\n\\nThis token is required when downloading any content from the Store using the CLI (and soon\u2122 when using other integration features), you must set it in your [Config.toml](https://docs.nanos.world/docs/next/core-concepts/server-manual/server-configuration#server-configuration-file) file as `token` setting.\\n\\nTo generate a token please refer to https://store.nanos.world/settings/tokens/.\\n\\n\\n## New Class: [Canvas](/docs/next/scripting-reference/classes/canvas)\\n\\n![](/img/blog/january/canvas.jpg)\\n\\nWe\'ve added a new class to completely replace our old **Render** Static Class: **Canvas**! Canvas is like a painting frame, you can draw anything onto it, from Lines, Squares to Materials and Textures!\\n\\nYou can also use it as UI or paint any object with a Canvas using `:SetMaterialFromCanvas()`!\\n\\nNow it\'s way easier to create a basic UI!\\n\\n```lua\\n-- Spawns a Canvas\\nlocal canvas = Canvas(true, Color.TRANSPARENT, 0, true)\\n\\n-- Subscribes for Update, we can only Draw inside this event\\ncanvas:Subscribe(\\"Update\\", function(self, width, height)\\n  -- Draws a Text in the middle of the screen\\n  self:DrawText(\\"Hello World!\\", Vector2D(width / 2, height / 2))\\n\\n  -- Draws a red line Horizontally\\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\\nend)\\n```\\n\\nThe [Basic HUD (Canvas) Tutorial](https://docs.nanos.world/docs/next/getting-started/tutorials-and-examples/basic-hud-canvas) has been updated as well!\\n\\n\\n## Steam Input + Controller\\n\\n![](/img/blog/january/controller.jpg)\\n\\nWe\'ve managed to integrate Steam Input. If you are not familiar with that, Steam Input allows you to set up and play with any Controller, and also configure it through Steam Interface.\\n\\nIt is a nice integration because it\'s a relatively simple implementation that allows nanos world to be played with controllers, and it gives users the possibility to customize bindings and share with the community.\\n\\nAn initial version has been released in the latest update, more bindings and configurations will come next.\\n\\n\\n## New built-in Key Glyphs\\n\\n![](/img/blog/january/glyphs.jpg)\\n\\nWe\'ve added a utility method to retrieve a Glyph/Image from a given Key. Just use `Input.GetKeyIcon(key_name)` and it will return the path of the image which can be used as Texture or as an usual image `<img>` in the HTML!\\n\\nYou can use it combined with `Input.GetMappedKey()` to dynamically get the Key Glyph based on the user\'s key binding configuration.\\n\\n\\n## Bullet Trails Improvement\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/bullet-trail.webm\\" />\\n</video>\\n\\nWe have reworked our default Bullet Trail particles. Before, depending on the point of view you could see a big sphere passing through and also several glitches in the sky. Now it was reworked to be more realistic and without any artifact!\\n\\n\\n## New Map Configurations\\n\\nNow it is possible to create individual Configuration files for each Map, in which you can define all compatible game-modes, spawn locations and add custom data as well!\\n\\nAlso, it is possible to set up a complete Package which will automatically load when this map is loaded.\\n\\n```toml title=\\"Map.toml\\"\\n# map configurations\\n[map]\\n    # compatible game-modes\\n    compatible_game_modes = [\\n        \\"sandbox\\",\\n        \\"deathmatch\\"\\n    ]\\n\\n    # list of spawn points\\n    spawn_points = [\\n        { location = \\"Vector(100, 200, 100)\\", rotation = \\"Rotator(0, 90, 0)\\" },\\n        { location = \\"Vector(200, 300, 100)\\", rotation = \\"Rotator(0, 90, 0)\\" },\\n    ]\\n\\n[custom_data]\\n    whatever = \\"anything\\"\\n\\n```\\n\\nCheck the complete documentation at [Map Script & Data](https://docs.nanos.world/docs/next/assets-modding/creating-assets/maps-and-levels/map-script-and-data).\\n\\n\\n:::tip\\n\\nThe following changes were added back in **1.1.0-1.3.0** update, we gonna highlight the best ones here!\\n\\n:::\\n\\n## Interactive CLI\\n\\n![](/img/blog/january/interactive-cli.jpg)\\n\\nAn amazing and extremely useful functionality that has been added to the CLI is the creation of Asset Packs & Packages interactively.\\n\\nUse `add [package|assets] NAME` and it will create the Asset Pack or Package interactively, it will create the Configuration and Default files as well!\\n\\n\\n## Actor Tags\\n\\nAt the request of our testers, we implemented a interface to access Unreal\'s Actor Tags, with `Actor.SetActorTag()` and `Actor.GetActorTag()` you can set/get unreal Actor Tags directly from Scripting (client side).\\n\\nActor Tags are just an array of strings which can be accessed from anywhere, including from Unreal Blueprint. This small addition increases the range of possibilities for integration with blueprints and external implementations.\\n\\n\\n## New Class: [SceneCapture](/docs/next/scripting-reference/classes/scene-capture)\\n\\nThis is a very cool feature released back in **1.1.0** update.\\n\\n**SceneCapture** is a Camera Actor which captures the environment in real time, and we can get the outputted result with `:SetMaterialFromSceneCapture()` into any other Actor!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/scene-capture.mp4\\" />\\n</video>\\n\\nIt has several configurable performance tweaks which makes it more efficient if you are not looking at the actors and also reduces the capture rate if you are too far!\\n\\n\\n## Assets Caching\\n\\nWe\'ve implemented a great feature which improves the performance and reduce stuttering when (re)loading Assets in runtime. Stuttering usually happen when using HDD and when loading something from Disk. Now every loaded asset (including files from disk - **.ogg** and **.jpg**) is cached and reused when loading again automatically. We still intend to add some options to auto load all assets from all loaded Asset Packs when entering a server and also a scriptable option to async load an Asset prior the use to further improve the stuttering and add more freedom to the scripters.\\n\\n\\n## Light Profiles\\n\\n![](/img/blog/january/light-profile.jpg)\\n\\nWe\'ve added a new cool setting for Lights: **Light Profile**, which allows changing the Light Profile Texture of a Light with [Light:SetTextureLightProfile()](https://docs.nanos.world/docs/next/scripting-reference/classes/light#settexturelightprofile).\\n\\nIt is possible to set to one of our built-in [Light Profiles](https://docs.nanos.world/docs/next/scripting-reference/glossary/enums#lightprofile). All built-in Light Profiles were imported from [IES Light Profile Pack](https://www.unrealengine.com/marketplace/en-US/product/ies-light-profile-pack).\\n\\nThis can add a realistic Flashlight effect to your Lights for example.\\n\\n\\n## Vehicle Improvements\\n\\nNow it is possible to manually control if the Vehicle Engine is started or not, also if it auto starts when a driver gets in with `Vehicle:SetAutoStartEngine()`.\\n\\nAlso we added a small detail: **Taillights**, it gets Red when braking and White when going backwards, it is customizable with `Vehicle:SetTaillightsSetup()`:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/vehicle-taillight.webm\\" />\\n</video>\\n\\n:::note\\n\\nThe Vehicle Mesh colors are still not in sync with the Headlights neither the Taillights, this will be improved in the next updates!\\n\\n:::\\n\\n\\n## Parachute Customization\\n\\n![](/img/blog/january/parachute.jpg)\\n\\nWe\'ve added an useful customization to the built-in parachute, now it\'s possible to change it\'s texture with `Character:SetParachuteTexture(texture)`. Also, all built-in Textures can be found at `nanos-world/NanosWorld/Content/NanosWorld/Textures/Parachute/` and used like `assets://nanos-world/Textures/Parachute`.\\n\\n\\n## Community Spotlight\\n\\nOur community has been working hard on several amazing stuff, we would like to share it with you!\\n\\n### T-Drones\\n\\n*by Timmy*\\n\\nTimmy worked on very cool fully functional Drone package, check it out! Fully integrated with the new SceneCapture for a \\"3D Camera System\\". Also the Drone has a function to back to home! Amazing!\\n\\n> T-Drones is a script designed to emulate the behavior of hobby drones, and thought to run on the vast majority of game-modes.\\n> \\n> It has been conceived to be as modular as possible and to adapt to the needs of anyone who wants to make modifications or additions easily.\\n\\n<iframe width=\\"620\\" height=\\"347\\" src=\\"https://www.youtube-nocookie.com/embed/TEzEKiGgDo0?vq=hd1080\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n### KOTOR RP\\n\\n*by ERO Team (NegativeName, Mougel, False & Tark)*\\n\\nThe ERO Team is working hard on a blasting Star Wars RP game-mode (KOTOR RP), this gonna be dope! Here\'s some screenshots of the worlds and the Combo system of the Light Saber!\\n\\n> Star Wars KOTOR RP is a french role-play game-mode in the Star Wars universe.\\n> \\n> You will play a character in this distant galaxy. Your role will depend on you. Will you join the Sith Empire to enslave the galaxy, protect it by joining the Galactic Republic, or take no side.\\n> \\n> The choice is yours! Become a Jedi, a Sith, a soldier, a mercenary, or a simple merchant.\\n\\n\\n![](/img/blog/january/star-wars-01.jpg)\\n\\n![](/img/blog/january/star-wars-02.jpg)\\n\\n![](/img/blog/january/star-wars-03.jpg)\\n\\n\\n### T-Bomber\\n\\n*by Timmy*\\n\\nAlso Timmy is creating a Bomberman game-mode! Excellent work, I can\'t wait to play it!\\n\\n> T-Bomber is a Bomberman-like game-mode Heavily inspired by the famous maze game.\\n> \\n> It aims to replicate the original Bomberman experience with some extra spice, and to show off some of the scripting possibilities of nanos world.\\n> \\n> The rules are very simple, the last one alive wins!\\n\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/timmy-bomberman-01.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/timmy-bomberman-03.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/timmy-bomberman-02.webm\\" />\\n</video>\\n\\n### VZombies\\n\\n*by Voltaism*\\n\\nVoltaism is working on his Zombies game-mode based on COD\'s one. It\'s incredibly fun and horrifying!\\n\\n> Nearly finished game-mode that is basically a clone of the classic Call Of Duty: Zombies mode where you have to survive against zombies the longer as you can!\\n> \\n> This game-mode also has bots that can play with you.\\n\\n![](/img/blog/january/vzombies-01.jpg)\\n\\n![](/img/blog/january/vzombies-02.jpg)\\n\\n\\n### nanos BattleField 2043\\n\\n*by LighterChu, Trevor & MemeFrug*\\n\\n> Battlefield 2042 came out, we expected the best. Why did we make nanos battlefield 2043, well it is not just Battlefield 2042 it\'s all battlefields mixed in the future of combine titles are here.\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/january/battlefield-01.webm\\" />\\n</video>\\n\\n![](/img/blog/january/battlefield-01.jpg)\\n\\n\\n## Conclusion\\n\\nThank you again for your feedback and support, every suggestion and bug found makes the nanos world wheel spin faster and faster!\\n\\n:::note\\n\\nThis blog contained several highlights of our progress in the last month. Note that countless improvements, bug fixes and some other new features are available in the changelog on our [Discord](https://discord.nanos.world) and also in-game.\\n\\n:::\\n\\nWe are aware of your biggest requests and we want to implement them as soon as possible to make the nanos world API more and more complete. We still have a long roadmap to go through, and we have big pillars of goals to bring new types of vehicles (including air and sea), customizable characters (any skeleton), direct Blueprint support and more!\\n\\nRight away we desire to rework our Steam Store Page, it was left behind due to some technical issues and we want to revive it, with that we desire to do a rebranding of the nanos world, we know that logos and great capsule images that relate to the game theme are of great importance for Steam self-marketing to attract new players!\\n\\nSee you in the next! Thank you!"},{"id":"november-2021","metadata":{"permalink":"/de/blog/november-2021","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-12-01-unreal-engine-5.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-12-01-unreal-engine-5.md","title":"2021 November: Unreal Engine 5?","description":"New Classes, Unreal Engine 5 Experiments and Scripting Improvements!","date":"2021-12-01T00:00:00.000Z","formattedDate":"1. Dezember 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":6.425,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"november-2021","title":"2021 November: Unreal Engine 5?","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2022 January: Store & Vault!","permalink":"/de/blog/january-2022"},"nextItem":{"title":"2021 October: Alpha released!","permalink":"/de/blog/alpha-released"}},"content":"New Classes, Unreal Engine 5 Experiments and Scripting Improvements!\\n\\n\\n## New Class: [Decal](/docs/scripting-reference/classes/decal)\\n\\n![](/img/blog/november/decal.jpg)\\n\\nWe\'ve added a new class to spawning **Decals**! Decals are Materials that are projected onto meshes in your level, including Static Meshes and Skeletal Meshes. You can load any `.jpg` from disk during runtime and use it as parameter in your Decal Material!\\n\\nAs Decals are inherited from Actors, you can change it\'s location, rotation, attach it or call any method from [Base Actor](/docs/scripting-reference/classes/base-classes/actor) on it!\\n\\n\\n## New Class: [Billboard](/docs/scripting-reference/classes/billboard)\\n\\n![](/img/blog/november/billboard.jpg)\\n\\nWe\'ve added another new class to spawning **Billboards**! A Billboard is a 2D Material that will be rendered always facing the camera. It\'s possible to use all custom methods from Paintable as well and spawning custom textures on it. You can tweak it\'s material properties with [Base Paintable](/docs/scripting-reference/classes/base-classes/paintable) or even use a material of your own.\\n\\nAs Billboards are inherited from Actors, you can change it\'s location, rotation, attach it or call any method from [Base Actor](/docs/scripting-reference/classes/base-classes/actor) on it!\\n\\n\\n## New Class: [Melee](/docs/scripting-reference/classes/melee)\\n\\n![](/img/blog/november/melee.jpg)\\n\\nWe are getting a brand new very-requested class: **Melee**! The Melee is coming to replace the former **Item** class.\\n\\n**Melee** is a new Class (which works exactly as the old **Item**) but now with ability to attack with it. It is possible to add custom animations, a cooldown and tweak the damage of it. The attack physics is procedurally based on the animation, this means you can stab, slash or even smash things only by changing the animation and then the hit will be based on that!\\n\\nThe results are quite fun, the hit/damage also affects the environment dynamically \ud83d\ude0a\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/november/melee.webm\\" />\\n</video>\\n\\n## Scripting Improvements\\n\\nWe\'ve listen to your demand and we\'re finally bringing long-awaited new amazing scripting features!\\n\\n### Real Hot Reload\\n\\n![](/img/blog/november/hotreload.jpg)\\n\\nAfter several requests, we\'ve started implementing a real Hot Reload feature!\\n\\nThe real **Hot Reloading** is an amazing feature which allows you loading new scripting code without needing to lose all the current memory state of your Packages. It works by loading the scripting files over the current running Lua VM.\\n\\nCurrently it works by manually triggering it in the console:\\n\\n```bash\\npackage hotreload [PACKAGE_NAME|all]\\n```\\n\\nThis will update the clients with the newer files version and load the `Index.lua` files from the packages. It will keep the current memory state of the packages as it is. It will also unsubscribe from all registered Events in that package.\\n\\nIn the future, it would be possible to add a real-time checker to automatically update the modified files after saving them.\\n\\n\\n### Extending Classes\\n\\n![](/img/blog/november/extending.jpg)\\n\\nA new cool feature that is being added is Extending and Inheriting nanos world Classes. *This is still experimental and we want to collect your feedback and find remaining bugs.*\\n\\nIt is now possible to **Add new Methods** to nanos world Classes, **Override existing Methods** and even **Override __index and __newindex**.\\n\\nAdding a new method to a class is easy like this:\\n\\n```lua\\n-- Adding a new method \'AddScore\' to Player class\\nfunction Player:AddScore(score)\\n    self:SetValue(\\"score\\", self:GetValue(\\"score\\", 0) + score)\\nend\\n\\n-- Using it\\nmy_player:AddScore(10)\\n```\\n\\nRead the full documentation [here](/docs/core-concepts/scripting/extending-classes).\\n\\n\\n## New View Mode: TopDown\\n\\nWe created a new native View Mode: **TopDown**!\\n\\nThis ViewMode allows you to fully control Characters from a TopDown perspective.\\n\\nWith just a single line:\\n\\n```lua\\nmy_character:SetViewMode(ViewMode.TopDown)\\n```\\n\\nnanos world becomes a completely different game, the mouse is now a crosshair which the Character aims to. Mechanics of picking up Weapons, grabbing Props and interacting with stuff was slightly modified to work with the ViewMode. Also driving is fully supported as well! \ud83e\udd29\\n\\nIt also is possible to dynamically change the view mode and switch between them during game-play and also tweak settings such as camera distance and so on.\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/november/top-down.webm\\" />\\n</video>\\n\\n## New Camera Methods\\n\\nPlayer got a bunch of new Camera methods: `Player:SetCameraSocketOffset()`, `Player:SetCameraArmLength()`.\\n\\nAnd also ability to detach and attach it to other actors (\ud83d\udc40 including Props): `Player:AttachCameraTo()` and `Player:ResetCamera()`. It will attach including a Camera SpringArm component!\\n\\nNote: **Spectate** methods from **Client** has been moved to **Player**: `Player:Spectate()`.\\n\\n\\n## [TextRender](/docs/scripting-reference/classes/text-render) on Server Side\\n\\nNow the Class `TextRender` now can be spawned on Server Side as well!\\n\\n\\n## Other Changes\\n\\nBesides the major topics covered here, we\'ve got several other new features which were been added during the month:\\n\\n- Added a new method for Character: `Character:Follow()` which will make the AI follow other actor.\\n- Added a new Utils method: `NanosUtils.Benchmark()` which will take a function as parameter and test the performance of it.\\n- Now `Subscribe` will return the callback function (which can be used to Unsubscribe afterwards).\\n- Fixed tons of bugs, detailed information can be found in the Discord Changelog channel.\\n\\n\\n## Unreal Engine 5\\n\\n![](/img/blog/november/ue5.jpg)\\n\\nLastly, it is already known we have a big objective of porting nanos world to Unreal Engine 5. Personally this is something I wanted to do as soon as possible because Unreal Engine 5 features are amazing, not to mention the publicity and marketing bonuses we would get for nanos world.\\n\\nIn this month, we decided to give a try: we tested porting nanos world to Unreal 5, at first we had some problems because of some Unreal modules have been completely renamed or even removed. And also we got some Unreal methods deprecated by the newer version, so we needed to update them and even reimplement some small stuff.\\n\\nCurrently Unreal Engine 4 uses PhysX physics and in Unreal 5 all the Physics Engine have been replaced by [Unreal\'s Chaos](https://docs.unrealengine.com/5.0/en-US/PhysicsFeatures/ChaosVSPhysxOverview/), which is a new Engine replacing the NVIDIA\'s PhysX.\\n\\nThis made us need to disable Vehicles for this test, as Unreal vehicles are very dependent on the PhysX engine and I would need to reimplement them using the new Chaos API for vehicles (I believe that our Vehicles API will need to change a bit as well once we fully update it).\\n\\nBut after half of dozen adaptions and disabled Vehicles, the results were surprisingly good! nanos world worked on Unreal Engine 5! Personally I got very happy and proud that the biggest problems I had was updating deprecate methods and updating some Unreal modules, thanks to the architecture developed so far in nanos world!\\n\\n\\n### Graphical Results\\n\\nnanos world on Unreal Engine 5 is beautiful, joying with Lumen and Global Illumination is really fun!\\n\\nThere were some graphical artifacts (such as changing the time of day too fast causing a delay/ghosting effect), but I believe they will improve them for the final Unreal Engine 5 version.\\n\\nCheck it out some screenshots taken during the tests trying the Global Illumination and Lumen:\\n\\n![](/img/blog/november/ue5-outside.jpg)\\n\\n![](/img/blog/november/ue5-inside-gas-01.jpg)\\n\\n![](/img/blog/november/ue5-inside-gas-02.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-01.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-02.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-03.jpg)\\n\\n\\n### Stability\\n\\nUnfortunately the stability was extremely bad. It didn\'t surprise me too much as Unreal Engine 5 is on Early Access, so bugs and crashes would happen. Several random crashes occurred during gameplay, I could notice mostly of them were caused by the new Chaos Engine (related to Physics).\\n\\n\\n### What now?\\n\\nI was really happy in being able to port nanos world to Unreal Engine 5, this attempt made us be sure that this would be possible. But I decided that currently is not time yet. During the tests we had several crashes (random ones, related to the low-level of Unreal, mainly coming from Chaos Engine and from Water) that made us conclude that is better to wait a better stable version because it makes nanos world really unplayable. Those random crashes are extremely bad as sometimes it\'s hard to know if it\'s my or Unreal\'s fault.\\n\\nFortunately, with this we could prove ourselves that nanos world will, when the time comes, be compatible and updated to Unreal Engine 5!"},{"id":"alpha-released","metadata":{"permalink":"/de/blog/alpha-released","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-11-03-alpha-released.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-11-03-alpha-released.md","title":"2021 October: Alpha released!","description":"We proudly present...","date":"2021-11-03T00:00:00.000Z","formattedDate":"3. November 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":10.95,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"alpha-released","title":"2021 October: Alpha released!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2021 November: Unreal Engine 5?","permalink":"/de/blog/november-2021"},"nextItem":{"title":"Bonus Blog: Weapons Improvements!","permalink":"/de/blog/weapons-improvements"}},"content":"![](/img/blog/alpha/alpha-release.jpg)\\n\\nWe proudly present...\\n\\n...The big long list of Alpha updates!\\n\\n\\n## Initial Thoughts\\n\\nThank you everyone for all the support this last month! Our community has grown a lot and it\'s lovely to see how nice and friendly it is becoming \ud83e\udd70!\\n\\nThe Playtest session in the Sunday was amazing! We were able to test the stability of the game very well. I can say that most of the crashes we had were related to external integration issues (WebUI or Unreal itself), which shows a great maturity of our Core system. I think about doing it more often, it was a lot of fun playing Halloween mode and testing the community game-modes!\\n\\nFrom now on, all updates will start to be versioned (finally!), small updates/non break-changes will get a PATCH version and break-changing will get a MINOR version.\\n\\n\\n:::note\\n\\nThe following changelog contains all features since last officially announced release 0.73.0. Many of the next items were already in the bleeding-edge branch.\\n\\n:::\\n\\n<iframe class=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameborder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n\\n## Materials\\n\\n![](/img/blog/alpha/material.jpg)\\n\\nNow nanos world supports Materials Assets! \ud83c\udfa8\\n\\nThis means you can configure your own materials in your Assets.toml and reference them using [Paintable](/docs/scripting-reference/classes/base-classes/paintable) methods!\\n\\nThe function `:SetDefaultMaterial()` has been replaced with `:SetMaterial()`. You can see a list of all built-in Materials read to use [here](/docs/next/assets-modding/default-asset-pack/default-materials).\\n\\nAlso it is now possible to get the WebUI material and set it to any surface (read more below)!\\n\\nSome existing methods are suffering a rework due that, e.g. [Pickables](/docs/scripting-reference/classes/base-classes/pickable) got a new method `:SetCrosshairMaterial()`, so you can set the Crosshair from a Material (and not from a predefined list anymore), also all old Crosshair have been converted into materials which you can find [here](/docs/scripting-reference/classes/base-classes/pickable#list-of-crosshairs-materials-included-in-default-asset-pack).\\n\\n\\n## Improved WebUI\\n\\n![](/img/blog/alpha/webui.jpg)\\n\\nThe [WebUI](/docs/scripting-reference/classes/webui) received several improvements, including the ability to run HTML5 Audio and Videos! \ud83d\udcfd\\n\\n:::caution\\n\\nWe are using a Beta version of Ultralight, which supports Audio and Video, crashes **WILL** happen, also the Audio is currently 2D only. Ultralight is working on a solution so I can implement 3D audio.\\n\\n:::\\n\\nThe **WebUI** constructor received some new parameters: **is_transparent**, **auto_resize**, **width** and **height**. Width and Height will only be used if Auto Resize is **OFF**, this is useful if you want to spawn a WebUI to use as Material to any surface (and don\'t want it to be the size of the screen).\\n\\nAlso it received new methods: [:SetFreeze()](/docs/scripting-reference/classes/webui#setfreeze), [:Resize()](/docs/scripting-reference/classes/webui#resize) and [:SetAutoResize()](/docs/scripting-reference/classes/webui#setautoresize).\\n\\nA new Searcher has been added onto it, improving how it can load your .html files, they are now looked in the following order:\\n1. Relative to `current-file-path/`\\n2. Relative to `current-package/Client/`\\n3. Relative to `current-package/`\\n4. Relative to `Packages/`\\n\\nIt is now possible to spawn a Material from a WebUI, which renders dynamic and automatically into **any** surface: `:SetMaterialFromWebUI()` (method from Actors).\\n\\n\\n## Actors\\n\\nNew additions for [Actors](/docs/scripting-reference/classes/base-classes/actor):\\n\\n* Added new method for all actors: [:SetLifeSpan(time)](/docs/scripting-reference/classes/base-classes/actor#setlifespan) which will automatically destroy this actor after `time` seconds.\\n* Added new method for all actors: [:IsBeingDestroyed()](/docs/scripting-reference/classes/base-classes/actor#isbeingdestroyed) which will return if this actor is being destroyed (useful to check from inside other Events such as `Drop` or `Ungrab`).\\n* Added new parameter for all actors [:AttachTo()](/docs/scripting-reference/classes/base-classes/actor#attachto) method: `lifespan_when_detached`, which will destroy the actor after `time` seconds after it\'s detached.\\n* Now event [TakeDamage](/docs/scripting-reference/classes/base-classes/actor#takedamage) has a new argument: `causer` (the object/actor which caused the damage). Also added new damage types: `RunOverVehicle` and `RunOverProp`.\\n* Now event [Hit](/docs/scripting-reference/classes/base-classes/actor#hit) has new arguments: `impact_force`, `normal_impulse`, `impact_location` and `velocity`.\\n* Now [:SetLocation()](/docs/scripting-reference/classes/base-classes/actor#setlocation) will try to find the better spot to teleport the Actor (to avoid collisions).\\n\\n\\n## Character\\n\\n![](/img/blog/alpha/character.jpg)\\n\\nNew additions for [Characters](/docs/scripting-reference/classes/character):\\n\\n**Character Methods additions/improvements:**\\n* Added several new Getters from it\'s properties.\\n* Added [:SetDamageMultiplier()](/docs/scripting-reference/classes/character#setdamagemultiplier) change the damage multiplier depending on the bone damaged.\\n* Added [:SetHiddenBone()](/docs/scripting-reference/classes/character#sethiddenbone) to make invisible any part of the body.\\n* Added [:SetJumpZVelocity()](/docs/scripting-reference/classes/character#setjumpzvelocity) to make the character jump higher.\\n* Improved [:PlayAnimation()](/docs/scripting-reference/classes/character#playanimation) got new parameters (blend times, loop and play rate), and now it supports loading any type of animation (Montage or Sequence).\\n* Removed `:SetInitialLocation()`, it has been replaced with [:Respawn()](/docs/scripting-reference/classes/character#respawn).\\n\\n**Character Events additions/improvements:**\\n* Added [AttemptEnterVehicle](/docs/scripting-reference/classes/character#attemptentervehicle) called when Character tries to enter a vehicle, returns false to prevent it.\\n* Added [AttemptLeaveVehicle](/docs/scripting-reference/classes/character#attemptleavevehicle) called when Character tries to leave a vehicle, returns false to prevent it.\\n* Added [AttemptReload](/docs/scripting-reference/classes/character#attemptreload) called when Character tries to reload it\'s weapon, returns false to prevent it.\\n* Added [Interact](/docs/scripting-reference/classes/character#interact) called when Characters tries to Pick Up a Pickable or Grab a Prop.\\n* Added [Highlight](/docs/scripting-reference/classes/character#highlight) called when Characters looks at a Prop or Pickable being able to pick up it.\\n\\nSome Characters animations have been renamed from `AM_` to `A_` in the Default Asset Pack (as they are not Montages anymore). Also lots of new Animations have been added.\\n\\n\\n## Weapons\\n\\n![](/img/blog/alpha/weapon.jpg)\\n\\nNew additions for [Weapons](/docs/scripting-reference/classes/weapon):\\n\\n**Weapon Methods additions/improvements:**\\n* Added several new Getters from it\'s properties.\\n* Added [:SetRecoil()](/docs/scripting-reference/classes/weapon#setrecoil) how much the weapon recoils physically.\\n* Added [:SetWallbangSettings()](/docs/scripting-reference/classes/weapon#setwallbangsettings) configure if bullets wallbangs walls.\\n* Added [:SetAnimationFire()](/docs/scripting-reference/classes/weapon#setanimationfire) animation on Weapon Skeletal when firing.\\n* Added [:SetSoundFireLastBullets()](/docs/scripting-reference/classes/weapon#setsoundfirelastbullets) sound when `N` last bullets are remaining in the clip.\\n* Improved [:SetAnimationReload()](/docs/scripting-reference/classes/weapon#setanimationreload) now has `play_rate` parameter.\\n\\n**Additional stuff:**\\n* Now weapons are hidden when Characters are driving.\\n* Added sounds of Shell Dropping & hitting the ground for the built-in Shell particles (this is a procedural and 100% precise sound \ud83d\ude09).\\n* Added sounds when picking up or dropping weapons, also it will slightly throw the weapon to the front when dropping it.\\n\\n\\n## Grenades\\n\\n![](/img/blog/alpha/grenade.jpg)\\n\\nAll Properties from [Grenades](/docs/scripting-reference/classes/grenade) have been deprecated, now access must be done through Methods.\\n\\nWe\'ve added a special Particle for Grenades `nanos-world::P_Grenade_Special` which will explode different particles depending on the ground the grenade is. I.e. will explode a \\"grass explosion\\" particle if grenade is over a grass surface, and a \\"water explosion\\" particle if it\'s under water. **Note:** This particle only works for Grenades.\\n\\n\\n## Sounds\\n\\n![](/img/blog/alpha/sound.jpg)\\n\\nNew additions for [Sounds](/docs/scripting-reference/classes/sound):\\n\\nNow it is possible to load `.ogg` sounds at runtime! You can store them in any Package or Asset Pack and load it using our new pattern for `SpecialPath` (`assets://asset-pack-name/path.ogg` or `package://package-name/path.ogg`).\\n\\nAdded `loop_mode` parameter to constructor (can loop any sound forever now).\\n\\nAlso, it is possible to pass `.ogg` using the SpecialPath in any Sound parameter.\\n\\n**Sound Methods additions/improvements:**\\n* Added [:GetDuration()](/docs/scripting-reference/classes/sound#getduration).\\n* Improved [:FadeIn()](/docs/scripting-reference/classes/sound#fadein) and [:FadeOut()](/docs/scripting-reference/classes/sound#fadeout) parameters.\\n\\n\\n## Input\\n\\n![](/img/blog/alpha/input.jpg)\\n\\nAdded a new class: [Input](/docs/scripting-reference/static-classes/input)!\\n\\nNow you can control, create and customize KeyBindings in a proper way! Example:\\n\\n```lua\\n-- Registers the binding_name \'SpawnMenu\' with default key \'Q\'\\n-- This will add \'SpawnMenu\' to user KeyBinding Settings automatically\\nInput.Register(\\"SpawnMenu\\", \\"Q\\")\\n\\n-- Subscribes for Pressing the key\\nInput.Bind(\\"SpawnMenu\\", InputEvent.Pressed, function()\\n    -- Opens the Spawn Menu\\nend)\\n\\n-- Subscribes for Releasing the key\\nInput.Bind(\\"SpawnMenu\\", InputEvent.Released, function()\\n    -- Closes the Spawn Menu\\nend)\\n```\\n\\n\\n## HTTP\\n\\n![](/img/blog/alpha/http.jpg)\\n\\nAdded a new class: [HTTP](/docs/scripting-reference/static-classes/http)!\\n\\nNow we have a proper standalone class for making HTTP requests. Is also features Async HTTP requests (and thread safe!)\\n\\n\\n## Performance Optimization\\n\\n![](/img/blog/alpha/performance.jpg)\\n\\nWe have worked hard on performance techniques for Alpha update. Here\'s the highlights:\\n\\n* Now Basic Structs [Vector](/docs/scripting-reference/structs/vector) and [Rotator](/docs/scripting-reference/structs/rotator) are automatically compressed when sending through the Network. Reducing it\'s size up to 90% in the best case! This was a great gain for network use.\\n* A new setting was added `Profiling` which you can enable with `--profiling` on server and in Settings on Client. This will log all the time elapsed to run operations/scripting events and some other stuff in the Console.\\n* Now HTTP requests (a.k.a. downloading files when joining a server) are automatically compressed, which may reduce the network usage when downloading big files!\\n* Now Actors which are very far or not on screen will be synchronized/updated half the time to improve performance. We still want to tweak it and make it more aggressive on some cases.\\n* The Assets Loading system have been reworked and is much faster now.\\n* Small [Props](/docs/scripting-reference/classes/prop) (radius < 200) will not collide with players or dynamic objects anymore. Also Bigger props will have CCD disabled by default (which drastically improved performance), this can be enabled in the Prop constructor.\\n* Now VOIP uses Steam system, which provides a great compression and also custom settings through Shift+Tab menu.\\n* Several improvements were made on our low-level Lua code to boost scripting performance.\\n\\n\\n## Server\\n\\nNew additions to [Server](/docs/scripting-reference/static-classes/server) static class:\\n\\n* Added new console command: `map [MAP_NAME]` to change the game map, this will also reload all packages and reconnect all players (like restarting the server).\\n* Added new methods [Server.GetVersion()](/docs/scripting-reference/static-classes/server#getversion), [Server.GetIP()](/docs/scripting-reference/static-classes/server#getip), [Server.GetPort()](/docs/scripting-reference/static-classes/server#getport), [Server.GetQueryPort()](/docs/scripting-reference/static-classes/server#getqueryport) and several missing getters.\\n\\n\\n## Client\\n\\nNew additions to [Client](/docs/scripting-reference/static-classes/client) static class:\\n\\n* New parameters have been added to [Client.SetCameraLocation()](/docs/scripting-reference/static-classes/client#setcameralocation) and [Client.SetCameraRotation()](/docs/scripting-reference/static-classes/client#setcamerarotation) to enable smooth movements with camera in a certain time.\\n* New methods for drawing debug shapes in 3D world: [Client.DrawDebug...()](/docs/scripting-reference/static-classes/client#drawdebug).\\n* Changed [Client.SetHighlight()](/docs/scripting-reference/static-classes/client#sethighlight) parameters, now it takes a Enum to define how the highlight will be.\\n* Added new method [Client.SetSteamRichPresence()](/docs/scripting-reference/static-classes/client#setsteamrichpresence) to customize the message in Steam Friends list.\\n\\nNow when joining a server, a Progress Bar will be displayed in the Taskbar, and also it will Flash once the loading is done:\\n\\n![](/img/blog/alpha/progress-taskbar.jpg)\\n\\n\\n## In-game Console\\n\\nNow it is possible to access Server Console from within the game!\\n\\nIf you open it, 2 tabs will appear: **client** and **server**. You can read all server logs, and also input commands.\\n\\n:::note\\n\\nNot all logs will appear in there, only the ones outputted while you are connected to the server.\\n\\n:::\\n\\n![](/img/blog/alpha/console.jpg)\\n\\n\\n## Timer\\n\\nNew additions to [Timer](/docs/scripting-reference/static-classes/timer):\\n\\n* Added new method: [Timer.Bind(timer_id, actor)](/docs/scripting-reference/static-classes/timer#bind) - this will associate a timer to an actor, when the actor is destroyed, this timer is destroyed too and will never be called.\\n* Added new method: [Timer.IsValid(timer_id)](/docs/scripting-reference/static-classes/timer#isvalid).\\n\\n\\n## CLI\\n\\n* Now it is possible to download multiple Assets/Packages at once with [CLI](/docs/core-concepts/server-manual/nanos-world-cli), just separate them by spaces, e.g.: `cli assets install quaternius city-park`.\\n\\n\\n## Steam Achievements\\n\\n![](/img/blog/alpha/achievements.jpg)\\n\\nWith Steam integration, we are making use of every feature possible it allows \ud83d\ude05!\\n\\nAnd this includes the **Achievements**! We are counting on the support of a talented friend [Esther](https://www.instagram.com/estherhoffmann/) who is drawing the amazing arts for them!\\n\\nLittle by little we will be creating more achievements and releasing them! We also count on your ideas for more!\\n\\n\\n## Scripting Improvements\\n\\n* Added new Searchers to [Package.Require()](/docs/scripting-reference/static-classes/package#require), we now currently support 5 searchers, which are looked in the following order:\\n    1. Relative to `current-file-path/`\\n    2. Relative to `current-package/Client/` or `current-package/Server/` *(depending on your side)*\\n    3. Relative to `current-package/Shared/`\\n    4. Relative to `current-package/`\\n    5. Relative to `Packages/`\\n\\n* [Package.Require()](/docs/scripting-reference/static-classes/package#require) now can be called in runtime and at any moment.\\n* [Package.RequirePackage()](/docs/scripting-reference/static-classes/package#requirepackage) now will load a package as a library inside the current package, it means the package loaded will now be automatically sent to clients, and all paths it loads is relative to the package itself (and not to the one which is requiring it anymore).\\n* Verbose logs will now display the current thread ID.\\n\\n\\n## Renamed Default Packages\\n\\nThe default Packages `NanosWorldWeapons` and `NanosWorldVehicles` were renamed to `nanos-world-weapons` and `nanos-world-vehicles`, following the new correct pattern for Packages and Assets names. Including them now should be made like `Package.RequirePackage(\\"nanos-world-weapons\\")`, the usage keeps the same (`NanosWorldWeapons.AK47()`).\\n\\n\\n## General Changes\\n\\n* [Cable](/docs/scripting-reference/classes/cable) got new methods: `:GetAttachedStartTo()` and `:GetAttachedEndTo()` to get if it\'s attached at any end.\\n* [Player](/docs/scripting-reference/classes/player) got new methods: `:SetVOIPVolume()`, `:GetSteamID()`,\\n* [Pickables](/docs/scripting-reference/classes/base-classes/pickable) got new events: `ReleaseUse`, `PullUse` when Character pulls or releases its usage (i.e. trigger for weapons)\\n* Improved the way the interact trigger enables for [Pickables](/docs/scripting-reference/classes/base-classes/pickable) and [Props](/docs/scripting-reference/classes/prop).\\n* [Trigger](/docs/scripting-reference/classes/trigger) got new method: `:ForceOverlapChecking()` which will checks for overlaps in the game thread and immediately dispatch events.\\n* Added new methods for [Quaternions](/docs/scripting-reference/structs/quat) (+, -, Normalize).\\n* Added new method for generating a random [Rotator](/docs/scripting-reference/structs/rotator): `Rotator.Random()`.\\n* Added lots of new Sounds, Animations, Props, Meshes in the Default Asset Pack.\\n* Added Steam Login.\\n* All .config files had it\'s `tabs` replaced with `spaces`.\\n* `.GetPairs()` now only supports `pairs`.\\n* Added Resolutions graphic settings.\\n* Make Day button from In-game menu has been removed.\\n* Added new Splash Effects when Props or objects enter the Water.\\n* `:GetValue()` now has an additional parameter: `fallback` which will be returned if the value doesn\'t exist.\\n* Probably many other things that were being added and were forgotten \ud83d\ude1c.\\n\\n\\n## Bug Fixes\\n\\n* Fixed `World.SetFogDensity()` not working.\\n* Fixed `Client.SetCameraLocation` not working.\\n* Fixed `Actors.RotateTo()` not doing properly math.\\n* Fixed `StaticMesh.GetBounds()` not working.\\n* Fixed Cables methods being able to be called on client side.\\n* Fixed several **Character** properties not syncing.\\n* Fixed a crash when changing Map at runtime.\\n* Fixed Characters not reseting the life to `max_health` when Respawning.\\n* Fixed dead ragdolls still moving around (from `MoveTo()`).\\n* Fixed infinite recursion with `LogEntry` event.\\n* Fixed **Characters** Morph Targets not syncing.\\n* Fixed Discord custom integration not working sometimes.\\n* Fixed a crash when a player had no Steam Profile image.\\n* Fixed Server Announce checkbox being disabled when unchecked on New Game screen.\\n* Fixed a crash when destroying entities from inside `Interact` event.\\n* Fixed hell lot of other Crashes \ud83d\udca5. Thanks for the Crash Reports!"},{"id":"weapons-improvements","metadata":{"permalink":"/de/blog/weapons-improvements","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-10-06-weapons-improvements.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-10-06-weapons-improvements.md","title":"Bonus Blog: Weapons Improvements!","description":"One of our main focus for nanos world is having fun, and we believe that the small details are the big support for the experience to be complete. In the past weeks, we\'ve been working on improving and adding small features to common actions such as firing, picking up objects and even how you perceive them happening. Here\'s the highlights!","date":"2021-10-06T00:00:00.000Z","formattedDate":"6. Oktober 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":2.04,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"weapons-improvements","title":"Bonus Blog: Weapons Improvements!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2021 October: Alpha released!","permalink":"/de/blog/alpha-released"},"nextItem":{"title":"2021 September: Sandbox Improvements!","permalink":"/de/blog/sandbox-improvements"}},"content":"One of our main focus for nanos world is having fun, and we believe that the small details are the big support for the experience to be complete. In the past weeks, we\'ve been working on improving and adding small features to common actions such as firing, picking up objects and even how you perceive them happening. Here\'s the highlights!\\n\\n\\n## New Weapon Animations\\n\\nSince the beginning, our weapons were stiff when shooting giving an impression of rigidity and lack of fluidity. With the simple improvement of adding firing animations to that, look how it looks better:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/weapons-improvements/m1911.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/weapons-improvements/makarov.webm\\" />\\n</video>\\n\\n## New effects for Bullet Shells\\n\\nBesides new animations, we added a subtle detail: **Bullet Shells Drop SFX**. And not that simple! The sound is precisely played in the location and moment the shells hit the ground or any surface, listen:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/weapons-improvements/bullet-shell-drop.webm\\" />\\n</video>\\n\\nCheck out a complete before and after comparison of some of the weapons, you can notice all the improvements in detail!\\n\\n<iframe width=\\"620\\" height=\\"347\\" src=\\"https://www.youtube-nocookie.com/embed/ln4AUntcyLM\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<br />\\n<br />\\n\\nNote that nanos world weapons animations and aiming are completely generated procedurally, that means when you are in First Person, the weapon sight location is calculated dynamically to be positioned right in the middle of your eyes, in a true first person mode.\\n\\n\\n## SFX when Picking Up objects\\n\\nA subtle sound detail added when you grab and drop a Weapon, and also now the object is slightly thrown to forward:\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/weapons-improvements/picking-up.webm\\" />\\n</video>\\n\\n## Scopes\\n\\nIs is really easy to add attachable objects in any Weapon, for example attaching a AWP Scope, we use the `SM_Scope_25x56` mesh for that:\\n\\n```lua\\n-- Spawns a AWP Weapon\\nlocal weapon = Weapon(location or Vector(), rotation or Rotator(), \\"nanos-world::SK_AWP\\")\\n\\n-- Attaches a Scope mesh, with configured offset to be perfectly aligned\\nweapon:AddStaticMeshAttached(\\"sight\\", \\"nanos-world::SM_Scope_25x56\\", \\"\\", Vector(20, 0, 11))\\n\\n-- Adjusts Sight Location to put the Sniper at exact location where the scope center will be when ADS\\nweapon:SetSightTransform(Vector(-15, 0, -4.6), Rotator(0, 0, 0))\\n```\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/weapons-improvements/sniper-scope.webm\\" />\\n</video>\\n\\nThis is completely procedural, it also uses the 3D Mesh scope materials!\\n\\n\\n:::tip\\n\\nYou can also check the [Official Weapons Package](https://github.com/nanos-world/nanos-world-weapons), and see how a RedDot has been added to a P90!\\n\\n:::\\n\\nThat\'s it! Thank you all!"},{"id":"sandbox-improvements","metadata":{"permalink":"/de/blog/sandbox-improvements","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-10-01-sandbox-improvements.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-10-01-sandbox-improvements.md","title":"2021 September: Sandbox Improvements!","description":"Lot\'s of improvements on Sandbox game-mode has been made in the past month, here\'s the highlights!","date":"2021-10-01T00:00:00.000Z","formattedDate":"1. Oktober 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":3.365,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"sandbox-improvements","title":"2021 September: Sandbox Improvements!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"Bonus Blog: Weapons Improvements!","permalink":"/de/blog/weapons-improvements"},"nextItem":{"title":"2021 August: Coming to Alpha!","permalink":"/de/blog/alpha"}},"content":"Lot\'s of improvements on Sandbox game-mode has been made in the past month, here\'s the highlights!\\n\\n## Reworked Spawn Menu UI & UX\\n\\nWe thought a lot about how to make the experience of sandbox game-mode even better. And with that we made several improvements, including the addition of categories in the sidebar, new tabs and even new stuff to spawn! Not to mention several bug fixes and the overall usability has been improved! No more movement blocked when opening the Spawn Menu!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/new-sandbox-ui.webm\\" />\\n</video>\\n\\n## New Props \ud83d\udce6\\n\\nWe\'re importing a big pack of props that will come with the base game.\\n\\nWe\'ve been debating a lot what the threshold is between shipping the game with several props or shipping it with no props and just allowing the player to download whatever they want from the Vault. It\'s a tough decision, but for now we\'ve decided to deliver a basic pack with some cool stuff, including new **Construction Props**, **Fruits**, **Tools** and even new **Weapons**!\\n\\n![](/img/blog/sandbox-improvements/new-props.jpg)\\n\\n\\n## NPCs \ud83e\udd16\\n\\nIt\'s been in there for some time, but we\'d like to highlight it! On Spawn Menu now there is a new tab which allows spawning NPCs.\\n\\nThose NPCs has some basic functionality defined in Lua, they walk around randomly and even run away when they are threatened! Insane!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/npcs.webm\\" />\\n</video>\\n\\n## New Weapons  \ud83d\udd2b\\n\\nThis is not strictly related to Sandbox game-mode, but besides the new Props, we are shipping brand new and configured Weapons in the `nanos-world-weapons` default package!\\n\\nThis includes a P90, UMP-45, M1911 Pistol and many other!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/new-weapons.webm\\" />\\n</video>\\n\\n## Weapons Pattern \ud83c\udfa8\\n\\nBesides the categories in the left-side, we are starting to add a new section to be our \\"options section\\", we started by adding a new option in the Weapons tab: **Patterns**.\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern.jpg)\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern-floor.jpg)\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern-infernoo.jpg)\\n\\nYou can change and select any pattern from the hundreds included in the game to be applied in your weapon (it is synchronized with other players as well)! It\'s is really easy to add your own `.jpg` as pattern in the menu!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/weapons-pattern.webm\\" />\\n</video>\\n\\n## Breakable Props \ud83c\udf49\\n\\nThis is an awesome feature which I\'ve been working in the last weeks, it\'s something 100% scripting side, I\'m not sure yet if this should become a built-in thing.\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/breakable-watermelon.webm\\" />\\n</video>\\n\\nBut now on Sandbox we can configure Props to break when Hit or TakeDamage! It is also possible to easily configure which debris will be generated, it\'s randomness and much more, see an example:\\n\\n```lua\\nSetBreakableProp(\\"nanos-world::SM_Fruit_Watermelon_01\\", 700, {\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Half_01\\", rotation = Rotator() },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Half_01\\", rotation = Rotator(180, 0, 0) },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Crust_01\\" },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Slice_01\\" },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Slice_01\\" },\\n})\\n```\\n\\nAnd voila every time a Watermelon spawns through the Spawn Menu, it will be breakable!\\n\\n\\n## Explosive Props \ud83d\udca5\\n\\nIn a sub-category as Breakable Props, we can have Explosive ones! Which will not only break if they take damage or get Hit, but will also EXPLODE! Causing damage, and even start a chain reaction of explosions!\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/chain-explosions.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/gas-house-explosion.webm\\" />\\n</video>\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/gas-explosion-danger.webm\\" />\\n</video>\\n\\nAs you can see it can be very dangerous to play with fire! \ud83d\ude05\\n\\n\\n## What\'s next! \ud83d\udca1\\n\\nWe are currently working on making everything ready for the official Alpha 1.0.0 release! We are slowly distributing Beta Keys to some testers, this way we can calmly fix some last bugs and give the finishing touches before the full launch!\\n\\nWe\'ve also implemented a LOT of new content for modding & scripting that will still be announced in the next weeks! This will make a HUGE changelog list so probably I will highlight all features in separated Blog News!\\n\\nThat\'s all for this blog! Thank you so much for all your support! \ud83e\udd70\\n\\n<video controls=\\"true\\" allowfullscreen=\\"true\\">\\n    <source src=\\"/videos/blog/sandbox-improvements/watch-teaser.webm\\" />\\n</video>"},{"id":"alpha","metadata":{"permalink":"/de/blog/alpha","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-09-01-alpha.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-09-01-alpha.md","title":"2021 August: Coming to Alpha!","description":"So long has passed since we started developing nanos world. In late 2017 we started digging about this ambitious idea, we dreamed of creating a seamless open world sandbox gaming experience without the limitations of reverse engineering games such as Just Cause 3 or Grand Theft Auto. So we decided to create a game from scratch, but only in mid 2019 we started working hard, it was really a very enthusiastic idea, but after a lot of blood, love and sweat we are getting there! \ud83e\udd70","date":"2021-09-01T00:00:00.000Z","formattedDate":"1. September 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":2.75,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"alpha","title":"2021 August: Coming to Alpha!","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2021 September: Sandbox Improvements!","permalink":"/de/blog/sandbox-improvements"},"nextItem":{"title":"\xdcberarbeitete Docs","permalink":"/de/blog/new-docs"}},"content":"![](/img/blog/alpha/alpha-banner.jpg)\\n\\nSo long has passed since we started developing nanos world. In late 2017 we started digging about this ambitious idea, we dreamed of creating a seamless open world sandbox gaming experience without the limitations of reverse engineering games such as Just Cause 3 or Grand Theft Auto. So we decided to create a game from scratch, but only in mid 2019 we started working hard, it was really a very enthusiastic idea, but after a lot of blood, love and sweat we are getting there! \ud83e\udd70\\n\\n## Alpha 1.0.0!\\n\\nAnd we\'re finally reaching the long-awaited Alpha announcement! Lots of things have happened, lots of iterations have been done (and lots will come \ud83d\ude1c) and thanks to all the support from our community and your feedback, we\'re getting closer and closer to releasing nanos world!\\n\\nThe official Alpha 1.0.0 update will come with tons of scripting and gaming news!\\n\\n## Steam!\\n\\n![](/img/blog/alpha/steam-guy.jpg)\\n\\nAlong with the Alpha announcement, we have LOTS of other surprises! As you may have noticed, now [nanos world is on STEAM](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=alpha_announcement)!!! Itch was very good and helped us a lot at the time, and we will always be grateful that their service and support has always been free! But then we made the decision to take this next step moving to the biggest game platform!\\n\\n:::tip\\n\\n\ud83c\udf8b Please don\'t forget to **WISHLIST** and share [nanos world steam page](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=alpha_announcement)!\\n\\n:::\\n\\n<iframe class=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameborder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n## New Website!\\n\\n![](/img/blog/alpha/new-website.jpg)\\n\\nWe\'ve created a brand new website which contains a lot of information about nanos world which will help us marketing it! If you didn\'t yet, please take a look at [https://nanos.world](https://nanos.world)!\\n\\n## Lot of news to come!\\n\\nIn the meantime since the last update (0.73.0), we\'ve accumulated **A LOT** of new content for nanos world. Most couldn\'t be released as we were working alongside the Steam integration.\\n\\n### \ud83d\udd22 Versions\\n\\n![](/img/blog/alpha/betas.jpg)\\n\\nWith the arrival of Steam, there will be several changes to how we distribute updates! We will now have two branches `stable/latest` and `bleeding-edge`, we intend to keep the default branch as stable as possible, while working in upcoming content in the *bleeding-edge* branch.\\n\\nBy default all testers will have access to *bleeding-edge* to be able to help us testing the new features before releasing them officially! Also in the docs we are going to have two versions which represent each of the branch!\\n\\n:::info\\n\\nThe version **a1.0.0** is already present in *bleeding-edge* branch and will come to *stable* as soon as possible! Really soon we will start publishing the full changelog of that!\\n\\n:::\\n\\n### \ud83e\uddea Testers\\n\\n![](/img/blog/alpha/manny.jpg)\\n\\nWith this new stage we decided to start fresh and restart our Tester subscriptions. Please check out [Sign Up for Alpha Testing](/docs/signing-up-alpha) for more information on how to become a Tester.\\n\\nIf you already a Tester, please reach us in discord so you can get a Steam key. We will prioritize active members in the community!\\n\\n### \ud83d\udd2e Future plans\\n\\nWe\'ve also created a new [Roadmap](/docs/roadmap) page with all our plans and redirecting to our official Roadmap boards!\\n\\nIn the coming weeks we will gradually start distributing some Steam Keys and as soon we will release the first Steam update with a lot of new content!\\n\\nStay tuned! And thank you so much for all your support!"},{"id":"new-docs","metadata":{"permalink":"/de/blog/new-docs","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-08-27-new-docs.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-08-27-new-docs.md","title":"\xdcberarbeitete Docs","description":"Vor einiger Zeit haben wir unsere brandneue Dokumentations-Version in Markdown ver\xf6ffentlicht! Es benutzte GitBook-Dienste und Hosting, der Sprung war gro\xdf von der vorherigen Version in Sphinx.","date":"2021-08-27T00:00:00.000Z","formattedDate":"27. August 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":1.505,"hasTruncateMarker":true,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"new-docs","title":"\xdcberarbeitete Docs","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"2021 August: Coming to Alpha!","permalink":"/de/blog/alpha"},"nextItem":{"title":"Sandbox-Update","permalink":"/de/blog/sandbox"}},"content":"![](/img/docs/new-docs.jpg)\\n\\nVor einiger Zeit haben wir unsere brandneue Dokumentations-Version in Markdown ver\xf6ffentlicht! Es benutzte GitBook-Dienste und Hosting, der Sprung war gro\xdf von der vorherigen Version in Sphinx.\\n\\nSeitdem erforschen wir die Marktm\xf6glichkeiten, wir haben auch ReadMe, ReType und MdBook getestet.\\n\\nUnd dann endlich haben wir Docusaurus gefunden! Ein Open Source Doc, der eine Menge Anpassungen erlaubt, und sogar einige erstaunliche eingebaute Funktionen, die wir verwenden k\xf6nnen! Dies ist ein n\xe4chster Sprung zum Erfolg!\\n\\nSchauen Sie sich die Schl\xfcsselfunktionen an, die im vollst\xe4ndigen Beitrag hinzugef\xfcgt wurden!\\n\\n\x3c!--truncate--\x3e\\n\\n![Docusaurus](https://d33wubrfki0l68.cloudfront.net/ea8e37a6a30e9c260a8936d95c579af4a2dd3df7/6ee7e/img/docusaurus_keytar.svg)\\n\\n## Schl\xfcsselfunktionen\\n\\n### Dunkler Modus!\\n\\nVielen Dank! Nun k\xf6nnen wir das Lichtschema in der rechten oberen Ecke des Bildschirms umschalten!\\n\\n![](/img/blog/new-docs/dark-mode.jpg)\\n\\n### Bessere Suche\\n\\nDocusaurus stellt viele verschiedene Suchmaschinen zur Verf\xfcgung, wir werden sie manchmal ver\xe4ndern, um die beste zu finden!\\n\\n![](/img/blog/new-docs/search.jpg)\\n\\n### Versionierung\\n\\n![](/img/blog/new-docs/versions.jpg)\\n\\nJetzt k\xf6nnen unsere Dokumentation verschiedene Versionen haben! Im Vorfeld einiger Pl\xe4ne, die wir im Hinterkopf haben, werden Sie in der Lage sein, verschiedene Versionen anzuzeigen!\\n\\n### Mehrsprachig\\n\\nWir unterst\xfctzen jetzt mehrere Sprachen! Die \xdcbersetzung wird von Crowdin bereitgestellt, einer Cloud-basierten L\xf6sung, die die Lokalisierung vereinfacht! Jeder kann bei der \xdcbersetzung der Seiten und sogar der Blog-Beitr\xe4ge mitarbeiten!\\n\\n![](/img/blog/new-docs/languages.jpg)\\n\\nGehen Sie dazu bitte auf [nanos world official docs Crowdin page](https://crowdin.com/project/nanos-world-docs), erstellen Sie einen Account und helfen Sie uns, die Seiten zu \xfcbersetzen! Wir unterst\xfctzen derzeit Portugiesisch, Deutsch und Franz\xf6sisch, aber mehr k\xf6nnen bei Bedarf hinzugef\xfcgt werden!\\n\\n![](/img/blog/new-docs/crowdin.jpg)\\n\\n### Blog-Seite!\\n\\nSie m\xfcssen es schon lesen, aber wir k\xf6nnen eine eingebaute Blog-Seite haben! Immer wieder Neuigkeiten!\\n\\n### 100% Anpassungsm\xf6glichkeiten\\n\\nWir k\xf6nnen die Kraft von React in Markdown einbetten, so dass wir einige Seitenkreationen modularisieren und automatisieren k\xf6nnen! Weniger Aufwand f\xfcr uns! Auch k\xf6nnen wir unsere eigenen Komponenten verbessern und viel das UX erstellen!\\n\\n\\nBleiben Sie dran, weil wir n\xe4chste Wochen werden wir etwas GRO\xdfES ank\xfcndigen werden!\\n\\nWir freuen uns \xfcber Ihr Feedback!"},{"id":"sandbox","metadata":{"permalink":"/de/blog/sandbox","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-06-18-sandbox.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-06-18-sandbox.md","title":"Sandbox-Update","description":"","date":"2021-06-18T00:00:00.000Z","formattedDate":"18. Juni 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"sandbox","title":"Sandbox-Update","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"\xdcberarbeitete Docs","permalink":"/de/blog/new-docs"},"nextItem":{"title":"Tresor-Update","permalink":"/de/blog/tresor"}},"content":"![](/img/blog/updates/sandbox.webp)"},{"id":"tresor","metadata":{"permalink":"/de/blog/tresor","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-04-03-vault-update.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-04-03-vault-update.md","title":"Tresor-Update","description":"","date":"2021-04-03T00:00:00.000Z","formattedDate":"3. April 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"tresor","title":"Tresor-Update","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"Sandbox-Update","permalink":"/de/blog/sandbox"},"nextItem":{"title":"Wasser-Update","permalink":"/de/blog/wasser"}},"content":"![](/img/blog/updates/vault.webp)"},{"id":"wasser","metadata":{"permalink":"/de/blog/wasser","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2021-01-11-water-update.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2021-01-11-water-update.md","title":"Wasser-Update","description":"","date":"2021-01-11T00:00:00.000Z","formattedDate":"11. Januar 2021","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"wasser","title":"Wasser-Update","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"Tresor-Update","permalink":"/de/blog/tresor"},"nextItem":{"title":"Fahrzeug-Update","permalink":"/de/blog/fahrzeuge"}},"content":"![](/img/blog/updates/water.webp)"},{"id":"fahrzeuge","metadata":{"permalink":"/de/blog/fahrzeuge","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2020-12-21-vehicles-update.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2020-12-21-vehicles-update.md","title":"Fahrzeug-Update","description":"","date":"2020-12-21T00:00:00.000Z","formattedDate":"21. Dezember 2020","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"fahrzeuge","title":"Fahrzeug-Update","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"Wasser-Update","permalink":"/de/blog/wasser"},"nextItem":{"title":"Halloween","permalink":"/de/blog/halloween"}},"content":"![](/img/blog/updates/transformers.webp)"},{"id":"halloween","metadata":{"permalink":"/de/blog/halloween","editUrl":"https://github.com/nanos-world/docs/edit/master/blog/2020-10-24-halloween.md","source":"@site/i18n/de/docusaurus-plugin-content-blog/2020-10-24-halloween.md","title":"Halloween","description":"","date":"2020-10-24T00:00:00.000Z","formattedDate":"24. Oktober 2020","tags":[{"label":"updates","permalink":"/de/blog/tags/updates"}],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Gabriel T. Nardy","title":"nanos world developer (SyedMuhammad)","url":"https://twitter.com/gtnardy","imageURL":"/img/blog/gtnardy.jpg","key":"gtnardy"}],"frontMatter":{"slug":"halloween","title":"Halloween","authors":"gtnardy","tags":["updates"]},"prevItem":{"title":"Fahrzeug-Update","permalink":"/de/blog/fahrzeuge"}},"content":"![](/img/blog/updates/halloween.webp)"}]}')}}]);